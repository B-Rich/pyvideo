[
  {
    "fields": {
      "category": 7, 
      "speakers": [], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Maciej Fija?kowski, Armin Rigo, Alex Gaynor, Laura Creighton and Jacob Hall</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PSFFundsPyPy807.mp4", 
      "title": "PSF funds PyPy", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        11, 
        231, 
        489, 
        91
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-25T20:17:43+00:00", 
      "source_url": "http://blip.tv/file/4933328", 
      "video_ogv_length": "12831984", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PSFFundsPyPy559.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PSFFundsPyPy559.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PSFFundsPyPy160.png", 
      "slug": "pycon-2011--psf-funds-pypy"
    }, 
    "model": "videos.Video", 
    "pk": 355
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        313, 
        321
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Will and Carl talk about Python Miro Community, where it's at now, the PSF grant, and what they're planning for it in the future.</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonMiroCommunityorgUniversalSubtitlesorg654.mp4", 
      "title": "Python.MiroCommunity.org + UniversalSubtitles.org", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        490, 
        491, 
        231, 
        489, 
        492, 
        493, 
        494
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-15T09:28:10+00:00", 
      "source_url": "http://blip.tv/file/4886547", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonMiroCommunityorgUniversalSubtitlesorg484.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PythonMiroCommunityorgUniversalSubtitlesorg484.ogv\"\n  })\n</script>", 
      "video_ogv_length": "23694273", 
      "thumbnail_url": "http://s3.amazonaws.com/s3.mirocommunity.org/python/localtv/video_thumbs/4324/375x295.png", 
      "slug": "pycon-2011--python-mirocommunity-org---universals"
    }, 
    "model": "videos.Video", 
    "pk": 356
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Sunday Afternoon Lightning Talks</p>\n<ul>\n<li>00:40 Paul Smith - Japan\n</li><li>03:10 Zed Shaw - Being Passionate\n</li><li>05:40 Pete Fein - Twiggy: A Pythonic Logger\n</li><li>11:15 Remy DeCausemaker - FOSS@RIT:\n</li><li>16:15 Evgeny Fadeev - Askbot (<a href=\"http://askbot.org/\">askbot.org</a>)\n</li><li>21:05 Carl Karsen - Video subtitles (<a href=\"http://universalsubtitles.org/\">universalsubtitles.org</a>, <a href=\"http://python.mirocommunity.org/\">python.mirocommunity.org</a>)\n</li><li>25:45 Larry Hastings - Minuteman (<a href=\"http://www.larryhastings.com/minuteman/\">www.larryhastings.com/minuteman</a>)\n</li><li>31:50 Mike Pirnat - Win at parenting with Python (<a href=\"http://howoldismykid.com/\">howoldismykid.com</a>)\n</li><li>36:15 Barry Warsaw - flufl.enum (<a href=\"https://launchpad.net/flufl.enum\">launchpad.net/flufl.enum</a>)\n</li><li>40:45 Jonathan Hartley - Make a game for PyWeek (<a href=\"http://www.pyweek.org/\">www.pyweek.org</a>)\n</li><li>45:30 Gregory P. Smith - Protobufs for data storage and transport (<a href=\"http://code.google.com/p/protobuf/\">code.google.com/p/protobuf</a>)\n</li><li>50:45 Dan Bentley - 2to3 + MOE\n</li><li>56:15 Dino Viehland - Python tools for Visual Studio\n</li><li>1:01:00 Moshe Zadka - Bayes' Theorem for Programmers\n</li><li>1:04:50 Brandon Rhodes - Adventure in Python\n</li><li>1:10:20 Whit Morriss - Sharing is caring, FOSS and Python at SurveyMonkey\n</li><li>1:15:25 Kumar McMillan - Fudging it with Mock Objects (<a href=\"http://farmdev.com/projects/fudge/\">farmdev.com/projects/fudge/</a>)\n</li></ul>\n", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011SundayAfternoonLightningTalks799.mp4", 
      "tags": [
        495, 
        496, 
        497, 
        498, 
        499, 
        500, 
        501, 
        491, 
        154, 
        231, 
        489, 
        502, 
        365, 
        503, 
        494
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--sunday-afternoon-lightning-talks", 
      "title": "Sunday Afternoon Lightning Talks", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-15T03:03:37+00:00", 
      "source_url": "http://blip.tv/file/4885747", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011SundayAfternoonLightningTalks855.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011SundayAfternoonLightningTalks882.ogv\"\n  })\n</script>", 
      "video_ogv_length": "407225047", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011SundayAfternoonLightningTalks799-486.jpg", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 357
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Saturday Afternoon Lightning Talks</p>\n<ul>\n<li>00:00 Eric Holscher - Read the Docs\n    (<a href=\"http://readthedocs.org/\">readthedocs.org</a>)\n</li><li>05:25 Nate Aune - DjangoZoom\n    (<a href=\"http://djangozoom.com/\">DjangoZoom</a>)\n</li><li>09:40 Paul Smith - Update on Japan\n</li><li>12:40 Phillip von Weitershausen - The English of Programming Languages (JavaScript)\n</li><li>18:15 Henrique Bastos - Community Bootstrap\n</li><li>24:00 Barry Warsaw - flufl.i18n library (<a href=\"https://launchpad.net/flufl.i18n\">https://launchpad.net/flufl.i18n</a>)\n</li><li>31:20 Aron Griffis - Window Manglement with PyWO (<a href=\"http://code.google.com/p/pywo/\">http://code.google.com/p/pywo/</a>)\n</li><li>35:00 Josiah Carlson - Over-Engineering for Dummies\n</li><li>40:35 Grace Law - Get the job you want\n</li></ul>\n", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011SaturdayAfternoonLightningTalks341.mp4", 
      "tags": [
        0, 
        37, 
        504, 
        505, 
        506, 
        507, 
        231, 
        489, 
        508, 
        163, 
        366
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Saturday Afternoon Lightning Talks", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T21:38:39+00:00", 
      "source_url": "http://blip.tv/file/4884781", 
      "video_ogv_length": "238830871", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011SaturdayAfternoonLightningTalks680.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011SaturdayAfternoonLightningTalks680.ogv\"\n  })\n</script>", 
      "summary": "<p>Saturday afternoon lightning talks</p>", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011SaturdayAfternoonLightningTalks857.png", 
      "slug": "pycon-2011--saturday-afternoon-lightning-talks"
    }, 
    "model": "videos.Video", 
    "pk": 358
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Saturday Morning Lightning Talks</p>\n<ul>\n<li>00:00 Alfredo Deza - Faster VIM Python Editing (<a href=\"https://github.com/alfredodeza/chapa.vim\">github.com/alfredodeza/chapa.vim</a>)\n</li><li>03:40 Dean Hall - Python-on-a-chip (<a href=\"http://pythononachip.org/\">pythononachip.org</a>)\n</li><li>07:55 Ned Batchelder - Cog will make you happy (<a href=\"http://nedbatchelder.com/code/cog\">nedbatchelder.com/code/cog</a>)\n</li><li>13:55 Brett Cannon - (Some of) your PSF money at work\n</li><li>21:10 Baiju Muthukaden - GetPython3.net (<a href=\"http://getpython3.net/\">getpython3.net</a>)\n</li><li>25:20 Shai Ben-yehuda - Light-weight UI\n</li></ul>\n<p>\n  [VIDEO HAS ISSUES: slides for Alfredo's and Ned's talks are\n  impossible to read.]\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011SaturdayMorningLightningTalks376.mp4", 
      "tags": [
        509, 
        510, 
        231, 
        489, 
        285, 
        392, 
        291, 
        336
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Saturday Morning Lightning Talks", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T21:32:13+00:00", 
      "source_url": "http://blip.tv/file/4884752", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011SaturdayMorningLightningTalks530.ogv", 
      "summary": "Saturday morning lightning talks", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011SaturdayMorningLightningTalks530.ogv\"\n  })\n</script>", 
      "video_ogv_length": "151847487", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011SaturdayMorningLightningTalks238.png", 
      "slug": "pycon-2011--saturday-morning-lightning-talks"
    }, 
    "model": "videos.Video", 
    "pk": 359
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Friday afternoon lightning talks</p>\n<ul>\n<li>00:00 Paul Smith - Raising money for Japan\n</li><li>02:24 Jeff Daily - The Global Arrays Parallel Programming Toolkit\n</li><li>08:30 Matt Harrison - My insecurity problem\n</li><li>13:10 Pete Fein - Hacking for Freedom\n</li><li>18:40 Robert Brewer - logging.statistics\n</li><li>27:30 Nathan Nichols - Lessons Learned Writing DSLs for Automated Content Generation\n</li><li>33:15 Giles Thomas - Why Resolver switched from IronPython to CPython\n</li></ul>\n\n\njapan, qtile, pyparsing, logging.statistics, resolver, cpython,\nironpython", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011FridayAfternoonLightningTalks688.mp4", 
      "title": "Friday Afternoon Lightning Talks", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--friday-afternoon-lightning-talks", 
      "tags": [
        18, 
        300, 
        511, 
        512, 
        231, 
        489, 
        375, 
        513
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T21:28:28+00:00", 
      "source_url": "http://blip.tv/file/4884733", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011FridayAfternoonLightningTalks787.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011FridayAfternoonLightningTalks769.ogv\"\n  })\n</script>", 
      "video_ogv_length": "191778195", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011FridayAfternoonLightningTalks981.png", 
      "summary": "<p>Friday afternoon lightning talks</p>"
    }, 
    "model": "videos.Video", 
    "pk": 360
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        178
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>\nThe talk will first walk the audience through the factors inherent to Montr\u00e9al itself and how it affected other user groups before Montr\u00e9al-Python. These groups inspired us to get a group of Python hackers started the presentation will show how we were able to leverage on the success of other user groups to bring our young community forward.\n</p>\n<p>\nThe various stages of our growth will be presented along with insights on how we managed to find speakers and venues at each point. The presentation will then go through an overview of our current activities, sharing in the process how effective they are in engaging the community. Our plans for the next few years will be presented then a summary will provide advice to anyone who would like to get started organizing a local Python user group.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011MontrealPythonLessonsLearnedFromBootstrapingAP699.mp4", 
      "title": "Montreal-Python -- Lessons Learned from Bootstraping a Python Community", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        176, 
        514, 
        231, 
        489, 
        515
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T16:45:13+00:00", 
      "source_url": "http://blip.tv/file/4883527", 
      "video_ogv_length": "108545715", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011MontrealPythonLessonsLearnedFromBootstrapingAP583.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011MontrealPythonLessonsLearnedFromBootstrapingAP583.ogv\"\n  })\n</script>", 
      "summary": "<p>\nMontr\u00e9al-Python is a user-group formed in 2007. It has since then grown into a thriving community with code sprint and regular meetings attracting over 50 attendees. This talk will present history of the group and will highlight the key factors behind its success with the hope to inspire others to replicate that accomplishment.\n</p>", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011MontrealPythonLessonsLearnedFromBootstrapingAP942.png", 
      "slug": "pycon-2011--montreal-python----lessons-learned-fr"
    }, 
    "model": "videos.Video", 
    "pk": 361
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Python IDEs Panel</p>\n<p>Moderated by Michael Foord</p>\n<ul>\n<li>Dino Viehland - Python Tools for Visual Studio\n</li><li>Dmitry Jemerov - PyCharm\n</li><li>Todd Whiteman - ActiveState Komodo IDE\n</li><li>Stephan Deibel - WingWare IDE\n</li><li>Barry Warsaw - Emacs\n</li></ul>\n<p>\nAs Python becomes more popular, more users are wanting IDEs that provide code completion, integrated source code control, project management, and other developer tools. This panel includes representatives from a number of Python-specific or Python-supporting IDE vendors, showing the ways that IDEs can speed up development on any platform.\n</p>\n<p>Abstract</p>\n<p>\nFor many developers, IDEs are an essential tool-just as essential as source code control. The growth of Python in recent years has led to a number of projects and vendors developing Python-specific or Python-supporting IDEs. This panel will allow attendees to compare and contrast the different IDEs available.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonIDEsPanel873.mp4", 
      "title": "Python IDEs Panel", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        335, 
        516, 
        517, 
        518, 
        433, 
        231, 
        489, 
        519, 
        520, 
        521
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T16:17:37+00:00", 
      "source_url": "http://blip.tv/file/4883406", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonIDEsPanel719.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PythonIDEsPanel719.ogv\"\n  })\n</script>", 
      "video_ogv_length": "236749333", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PythonIDEsPanel405.png", 
      "slug": "pycon-2011--python-ides-panel"
    }, 
    "model": "videos.Video", 
    "pk": 362
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        179
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>\nContrary to expectations, the prevalence of television did not cause every American to speak in a common standard dialect. Rather, smaller sub-regional dialects are merging into stronger regional dialects with the largest change in spoken English since the 1750's taking place in the Northern Cities Vowel Shift.\n</p>\n<p>\nSocial Media is widely considered a conversational media, users often leaning on their dialect which to express themselves.\n</p>\n<p>\nTaking a recent tweet for example:\n</p>\n<pre>'_andBeautyKills: \u2013 after tonight, don\u2019t leave your boy roun\u2019 me, umma #true playa fareal.'</pre>\n<p>\nThis tweet presents a problem for traditional natural language processing paradigm:\n</p>\n<ul>\n<li>Do they build out an extensive reg ex to solve this?\n</li><li>Even Worse, do they reject it because of non-Standard English?\n</li><li>How do they respond such that communication is effective?\n</li></ul>\n<p>\nCurrently under development with Python using the Natural Language Toolkit are the tools and methodologies to process, understand and respond to communication that falls outside Standard American English. This talk will focus on the status of existing tools, where development stands, challenges for traditional tools and potential opportunities for exploration.\n</p>\n<p>\nWhile limited to American English, any participant who is studying natural language processing of any language is welcome and sure to learn. The techniques could be applied to languages around the world for which the motivated programmer is knowledgeable about.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011LinguisticsOfTwitter583.mp4", 
      "tags": [
        456, 
        231, 
        489, 
        522
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--linguistics-of-twitter", 
      "title": "Linguistics of Twitter", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T16:11:00+00:00", 
      "source_url": "http://blip.tv/file/4883374", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011LinguisticsOfTwitter829.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011LinguisticsOfTwitter829.ogv\"\n  })\n</script>", 
      "video_ogv_length": "157725186", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011LinguisticsOfTwitter909.png", 
      "summary": "<p>\nDialectical changes in America are influencing expression online. This talk will discuss a current project which is using the Natural Language Toolkit to develop up to date reference materials to measure and monitor online natural language.\n</p>"
    }, 
    "model": "videos.Video", 
    "pk": 363
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        180
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>\nThe talk will focus on the recent issues fixed in Python 3.1 and 3.2:\n</p>\n<ul>\n<li>Use the PEP 383 (error handler to store undecodable bytes) everywhere\n</li><li>Encoding of the command line arguments: utf-8 on Mac OS X, locale encoding on UNIX/BSD, unicode on Windows\n</li><li>Environment variables: creation of os.environb\n</li><li>Filenames: huge work to support the PEP 383 everywhere, creation of os.fsencode() and os.fsdecode()\n</li><li>Python source code encoding: use tokenize.detect_encoding() instead of the locale encoding\n</li><li>some library examples: email, ftp, ...\n</li><li>etc.\n</li></ul>\n<p>\nThe talk will present not only the changes in Python, but also in the C API.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011StatusOfUnicodeInPython3567.mp4", 
      "tags": [
        231, 
        489, 
        392, 
        523
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Status of Unicode in Python 3", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T16:05:57+00:00", 
      "source_url": "http://blip.tv/file/4883349", 
      "video_ogv_length": "173547130", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011StatusOfUnicodeInPython3208.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011StatusOfUnicodeInPython3208.ogv\"\n  })\n</script>", 
      "summary": "<p>\nIntroduced in Python 2.0, unicode became the default string type in Python 3.0. It took 8 years to switch to unicode, and since Python 3.0, a lot of bugs has been fixed. The switch to unicode opened many questions. Should Python support both bytes and characters for filenames? What to do with undecodable bytes? etc.\n</p>", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011StatusOfUnicodeInPython3393.png", 
      "slug": "pycon-2011--status-of-unicode-in-python-3"
    }, 
    "model": "videos.Video", 
    "pk": 364
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        181
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>\nThe HTSQL processor is a high-level URI-based query language for relational databases such as SQLite, PostgreSQL or MySQL. Since it's written in Python, it is easy to integrate and generates immediate value as the core of your application's custom reporting engine. HTSQL is like the Django or SQLAlchemy ORMs in that it generates SQL, but unlike an ORM in that its design center is completely different -- it was created for hard core reporting and not object to relational mapping. Hence, it is a wonderful complement to existing WSGI-based applications to easily create dashboards, complex reports. We use HTSQL as a REST reporting interface for data integration and ad-hoc queries.\n</p>\n<p>\nThis talk will have two parts. In the first part we'll give a brief overview of the rationale and design of the query language. In the second part, we'll show how to hook the HTSQL processor into your WSGI application and how to make custom commands, such as a simple calendar output from a table containing a date column.\n</p>\n<p>\nThe talk will be presented by Clark Evans, HTSQL was developed by Kyrylo Simonov. The main HTSQL site is <a href=\"http://htsql.org\">http://htsql.org</a> and the code is at <a href=\"http://bitbucket.org/prometheus/htsql\">http://bitbucket.org/prometheus/htsql</a>. It'll be similar to previous talks, such as <a href=\"http://htsql.org/talks/20101103.html\">http://htsql.org/talks/20101103.html</a>.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011HTSQLAnInsanelyGoodWSGIRESTInterfaceToYour548.mp4", 
      "tags": [
        524, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "HTSQL - an insanely good WSGI / REST interface to your favorite database", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T16:02:21+00:00", 
      "source_url": "http://blip.tv/file/4883320", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011HTSQLAnInsanelyGoodWSGIRESTInterfaceToYour290.ogv", 
      "summary": "<p>\nHTSQL is a URI-based high-level query language for relational databases; it is written in the Python language. HTSQL is a wonderful complement existing WSGI-based applications, making it trivial to create interactive dashboards, complex reports. We use HTSQL as a REST query interface for data integration and ad-hoc reporting by technical users or ``accidental programmers``.\n</p>", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011HTSQLAnInsanelyGoodWSGIRESTInterfaceToYour290.ogv\"\n  })\n</script>", 
      "video_ogv_length": "176555453", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011HTSQLAnInsanelyGoodWSGIRESTInterfaceToYour159.png", 
      "slug": "pycon-2011--htsql---an-insanely-good-wsgi---rest-"
    }, 
    "model": "videos.Video", 
    "pk": 365
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        138
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>\nShare the lessons learned from a decade of core Python development, what worked and what didn't. Look at the development process and thinking behind some of Python's successful APIs and ones that leave something to be desired. Learn general principles for designing a good API for public consumption.\n</p>\n<p>\nHear the story and principles behind the design of Python's \"in\" operator, the development of deques, and the evolution of the set API.\n</p>\n<p>\nExamine the principles and story behind the development of the named tuple API. Learn about unforeseen use cases and a bug that made it to production.\n</p>\n<p>\nDiscuss the decimal module's API challenge -- adhering to a published standard. Talk about the Queue module's framework style and how the API was refactored.\n</p>\n<p>\nDiscuss what we've learned about naming functions and methods. Look at the i-naming convention in itertools, camelcase oddities, the proposed Italian name for enumerate, and vaguely named methods like assertItemsEqual.\n</p>\n<p>\nLearn about Guido's ideas on when to add flags to method signatures. Recap his thoughts on the problems with the percent formatting operator. Then hear Raymond's advice on packaging, hierarchies, and nested name spaces.\n</p>\n<p>\nSee how to use documentation to mitigate API problems using examples from regular expressions, decimal, tokenize, sorting.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011APIDesignLessonsLearned164.mp4", 
      "title": "API Design: Lessons Learned", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--api-design--lessons-learned", 
      "tags": [
        69, 
        525, 
        18, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:55:47+00:00", 
      "source_url": "http://blip.tv/file/4883290", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011APIDesignLessonsLearned261.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011APIDesignLessonsLearned261.ogv\"\n  })\n</script>", 
      "video_ogv_length": "262408868", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011APIDesignLessonsLearned555.png", 
      "summary": "<p>API lessons learned from a decade of core Python development.</p>"
    }, 
    "model": "videos.Video", 
    "pk": 366
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        138
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>\nLook at how a Counter is implemented. See a simple word count example. Use a counter for unittests. Implement a sparse matrix.\n</p>\n<p>\nShow how named tuples are created, combined, subclassed, and extended. See how to implement an Enum class and how to create default values.\n</p>\n<p>\nLearn the basics of the new string formatting syntax. See how to use it for templating.\n</p>\n<p>\nShow everyday uses for an LRU cache, look at the underlying implementation, and see how to use it to trivially solve a dynamic programming problem.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011FunWithPythonsNewerTools386.mp4", 
      "title": "Fun with Python's Newer Tools", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        526, 
        527, 
        528, 
        231, 
        489, 
        529
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:48:23+00:00", 
      "source_url": "http://blip.tv/file/4883247", 
      "video_ogv_length": "186654267", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011FunWithPythonsNewerTools811.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011FunWithPythonsNewerTools811.ogv\"\n  })\n</script>", 
      "summary": "<p>\nSpend ten minutes each learning to work with Counters, named tuples, new string formatting, and the LRU cache. Learn the basic API, see how it works under the hood, enjoy a simple example, and then have fun pushing it to the limit in interesting ways.\n</p>", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011FunWithPythonsNewerTools386-808.jpg", 
      "slug": "pycon-2011--fun-with-python--39-s-newer-tools"
    }, 
    "model": "videos.Video", 
    "pk": 367
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        182
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>\nLearn how cool it is to write command-line tools using IronPython and Visual Studios. In this talk we cover why command-lines tools are important for .NET shops, how to write one, and finally, how to distribute it as a standalone .exe.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011WritingCommandLineToolsUsingIronPythonAndVisual529.mp4", 
      "title": "Writing Command-Line Tools using IronPython and Visual Studios", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        530, 
        531, 
        300, 
        231, 
        489, 
        520
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:43:06+00:00", 
      "source_url": "http://blip.tv/file/4883215", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011WritingCommandLineToolsUsingIronPythonAndVisual960.ogv", 
      "summary": "<p>\nLearn how cool it is to write command-line tools using IronPython and Visual Studios. In this talk we cover why command-lines tools are important for .NET shops, how to write one, and finally, how to distribute it as a standalone .exe.\n</p>", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011WritingCommandLineToolsUsingIronPythonAndVisual960.ogv\"\n  })\n</script>", 
      "video_ogv_length": "151406538", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011WritingCommandLineToolsUsingIronPythonAndVisual529-639.jpg", 
      "slug": "pycon-2011--writing-command-line-tools-using-iron"
    }, 
    "model": "videos.Video", 
    "pk": 368
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        183
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>\nThe Mars Exploration Rovers (MER), Spirit and Opportunity, have been roaming the surface of Mars since January of 2004 leading to many discoveries about the nature and history of our sister planet. Each activity requires a complex set of coordinated activites by a team. Early in the MER mission the author automated much of the task of one of the positions, the Payload Uplink Lead, for 7 of the 9 cameras on each rover. The system, called AutoPUL, is written in Python and that has proven to be the excellent choice for the development and maintenance. In the talk I'll describe the Mars Rover mission and the operational activities and how AutoPUL and Python fullfilled those needs.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011GreasingTheWheelsOfExplorationWithPython860.mp4", 
      "tags": [
        56, 
        532, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--greasing-the-wheels-of-exploration-wi", 
      "title": "Greasing the Wheels of Exploration with Python", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:38:16+00:00", 
      "source_url": "http://blip.tv/file/4883198", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011GreasingTheWheelsOfExplorationWithPython466.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011GreasingTheWheelsOfExplorationWithPython466.ogv\"\n  })\n</script>", 
      "video_ogv_length": "149385865", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011GreasingTheWheelsOfExplorationWithPython860-969.jpg", 
      "summary": "<p>\nThe control of the Mars Exploration Rovers (MER) requires a complex set of coordinated activites by a team. Early in the MER mission the author automated in Python much of the task of one of the operation positions, the Payload Uplink Lead, for 7 of the 9 cameras on each rover. This talk describes the MER rovers, the operation tasks and that implemented system.\n</p>"
    }, 
    "model": "videos.Video", 
    "pk": 369
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        184
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Hidden Treasures in the Standard Library</p>\n<p>Presented by Doug Hellmann</p>\n<p>\nThis presentation covers features of the standard library not widely known or used. Each feature is presented with a short demonstration program and explanation.\n</p>\n<p>Abstract</p>\n<p>\nThe standard library contains many hidden gems that are not widely used, either because they are not publicized enough or because they are deep in a module that programmers haven't had cause to study or use. This presentation covers 8-10 selected topics of this nature in about 25 minutes (leaving time for a couple of questions). Demonstration code is included for every item.\n</p>\n<p>\nPossible tips include, in no particular order:\n</p>\n<ul>\n<li>Using hmac to verify pickled data before unpacking it.\n</li><li>Using uuid4 to generate session tokens.\n</li><li>Regular expression look-ahead/behind matches.\n</li><li>pdb startup files\n</li><li>Reading files with mmap\n</li><li>Using csv dialects\n</li><li>The robotparser module\n</li><li>The rlcompleter module\n</li><li>Using locale to format numbers and currency\n</li><li>The cgitb module\n</li><li>pkgutil.getdata\n</li><li>contextlib.contextmanager\n</li><li>The cmd module\n</li><li>The fileinput module\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011HiddenTreasuresInTheStandardLibrary179.mp4", 
      "tags": [
        533, 
        420, 
        534, 
        294, 
        535, 
        536, 
        537, 
        364, 
        538, 
        231, 
        489, 
        539, 
        540, 
        541
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Hidden Treasures in the Standard Library", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:32:38+00:00", 
      "source_url": "http://blip.tv/file/4883162", 
      "video_ogv_length": "132722607", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011HiddenTreasuresInTheStandardLibrary366.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011HiddenTreasuresInTheStandardLibrary366.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011HiddenTreasuresInTheStandardLibrary179-925.jpg", 
      "slug": "pycon-2011--hidden-treasures-in-the-standard-libr"
    }, 
    "model": "videos.Video", 
    "pk": 370
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        185
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Hookbox: All Python web-frameworks, now real-time. Batteries Included.</p>\n<p>Presented by Michael Carter</p>\n<p>\nLearn how to supercharge your python web applications (Django, Pylons, TG, GAE, Werkzeug, WSGI, etc) with real-time features! Presenceful and moderated chat? About 10 minutes, seriously. A real-time graph to monitor the CPU? Less than five. If you pay attention for at least half of this talk, you'll leave confident and ready to take advantage of WebSocket, Comet, and the world, thanks to Hookbox.\n</p>\n<p>Abstract</p>\n<p>\nHookbox (<a href=\"http://hookbox.org/\">http://hookbox.org</a>) is a Python and Eventlet-based Comet-server/message-queue which tightly integrates with existing web application infrastructure via web hooks and a REST interface; Hookbox\u2019s purpose is to ease the development of real-time web applications, with an emphasis on tight integration with existing web technology. Put simply, Hookbox is a web-enabled message queue.\n</p>\n<p>\nBrowers may directly connect to Hookbox, subscribe to named channels, and publish and receive messages on those channels in real-time. An external application (typically the web application itself) may also publish messages to channels by means of the Hookbox REST interface. All authentication and authorization is performed by an external web application via designated \u201cwebhook\u201d callbacks.\n</p>\n<p>\nIn this talk we cover the broad principles of Hookbox, then examine a few short examples in depth, including presenceful and moderated chat, real-time graphing, and, of course, a game. The code examples are very purposefully brief; the important parts of the talk deal with the interaction model between browser, web framework, and Hookbox -- everything else follows naturally and easily into place.\n</p>\n<p>\nThe audience need not be familiar with a particular web framework over another, but they must be proficient with at least one.\n</p>\n<p>\nThough this talk is aimed at a novice level, we'll also spend some time talking about the more advanced features that Hookbox provides.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011HookboxAllPythonWebframeworksNowRealtimeBatteri862.mp4", 
      "tags": [
        542, 
        231, 
        489, 
        162, 
        543
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Hookbox: All Python web-frameworks, now real-time. Batteries Included.", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:28:22+00:00", 
      "source_url": "http://blip.tv/file/4883145", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011HookboxAllPythonWebframeworksNowRealtimeBatteri115.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011HookboxAllPythonWebframeworksNowRealtimeBatteri115.ogv\"\n  })\n</script>", 
      "video_ogv_length": "158119468", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011HookboxAllPythonWebframeworksNowRealtimeBatteri858.png", 
      "slug": "pycon-2011--hookbox--all-python-web-frameworks--n"
    }, 
    "model": "videos.Video", 
    "pk": 371
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        186
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Python - The Secret Sauce in the Open Cloud</p>\n<p>Presented by Jason Huggins</p>\n<p>\nThis talk will go into detail on current cloud computing technology, specifically OpenStack and libvirt and how Python is the \"secret sauce\" that powers the open cloud. We'll show how to bring up your own cloud \"from scratch\", and explain why you would do such a thing.\n</p>\n<p>Abstract</p>\n<p>\nCovered topics:\n</p>\n<ul>\n<li>How to use VirtualBox\n</li><li>How to use kvm\n</li><li>How to use libvirt with Python\n</li><li>How to check out, build, and deploy OpenStack\n</li><li>How to setup and maintain your own cloud\n</li><li>Real world examples\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonTheSecretSauceInTheOpenCloud751.mp4", 
      "title": "Python - The Secret Sauce in the Open Cloud", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--python---the-secret-sauce-in-the-open", 
      "tags": [
        544, 
        545, 
        546, 
        231, 
        489, 
        547
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:23:41+00:00", 
      "source_url": "http://blip.tv/file/4883120", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonTheSecretSauceInTheOpenCloud878.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PythonTheSecretSauceInTheOpenCloud878.ogv\"\n  })\n</script>", 
      "video_ogv_length": "119189573", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PythonTheSecretSauceInTheOpenCloud789.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 372
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        186
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster, and more Pythonicly</p>\n<p>Presented by Jason Huggins</p>\n<p>\nSelenium is a popular web application testing tool for acceptance testing dynamic web applications. Selenium 2.0 has a different architecture that makes it leaner, meaner, and more pythonic -- for testing desktop *and* mobile web (iPhone/Android) apps. This talk will go into detail on how Selenium 2 works. If you like testing and Python, you'll enjoy what's cooking in Selenium 2.\n</p>\n<p>Abstract</p>\n<p>\nSelenium was originally created by Jason Huggins and his team at ThoughtWorks in 2004 as a tool for cross-browser acceptance testing of dynamic web apps -- apps that use JavaScript heavily on the client. Over the years, the Selenium tool family has expanded to include a Firefox record and playback tool (Selenium IDE), a Remote Control server that allows API access from any major programming language, and a Grid server that allows tests to run in parallel across many machines.\n</p>\n<p>\nDespite it's widespread industry adoption, the Selenium project is far from done. Selenium's goal is to drive any browser the same way an end user would (e.g. opening pages, clicking buttons, entering text, etc.) with any programming language on any OS platform. It's an ambitious goal, and with a steady stream of new browsers (Chrome), new platforms (Android, iPhone), and new HTML5 technologies (video, canvas, offline storage) to support, just keeping up is an arduous task.\n</p>\n<p>\nAstute observers will note, though, the bulk of Selenium's automation engine is implemented in JavaScript, which is confined by the browser's security sandbox in which it executes JavaScript code. That security sandbox ultimately is at odds with Selenium's goal to drive the browser just as a user would. A user has no problem interacting with security alerts for untrusted certificates, or file upload dialog boxes, but Selenium can't deal with these kinds of things easily without extra effort.\n</p>\n<p>\nEnter WebDriver. There's a lot in common between the Selenium and WebDriver projects. They're both tools for automated testing of web applications, and both aspire to offer browser test automation from any language on any platform. However, they do their thing in radically different ways. Selenium uses the strategy that JavaScript is the one common tool available for automating all browsers, even though its capabilities can be highly constrained. Meanwhile, WebDriver leverages the strategy that acknowledges different automation strategies work best for different browsers. COM works best for IE on Windows, Apple Events for Safari on OS X. And Firefox, well, the best way to natively automate Firefox is to turn it into a telnet server. (But that's a whole other PyCon talk entirely!) WebDriver aims to natively drive each browser the best way possible for maximum capability, then hiding those differences between lower level C and C++ APIs, and finally exposing the functionality through the appropriate C/C++ mechanism for each target language, such as using ctypes for Python. With WebDriver's technical approach, anything a user can do is now possible in test automation code.\n</p>\n<p>\nThis talk will go into detail explaining how Selenium and WebDriver (aka Selenium 2) work, comparing the strengths and weaknesses of each tool's approach to browser automation. The talk will then explain what Selenium 2.0 looks like and how to use it.\n</p>\n<p>\nTalk outline:\n</p>\n<ul>\n<li>Description of problem space\n<ul>\n<li>More browsers\n</li>\n<li>More frequent browser releases\n</li>\n<li>HTML 5 - video, canvas, offline storage\n</li>\n<li>The web in more places - Mobile, Chrome OS\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Description of Selenium\n</li>\n</ul>\n<ul>\n<li>Strengths of Selenium\n</li>\n</ul>\n<ul>\n<li>Description of challenges for Selenium 1\n<ul>\n<li>Javascript security sandbox\n</li>\n<li>Same origin policy / cross-site scripting\n</li>\n<li>OS-level popups\n</li>\n<li>Speed / stability\n</li>\n<li>Java as the cross-language integration point (aka Not Very Pythonic, eh?)\n\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Description of Selenium 2 (aka WebDriver)\n</li>\n</ul>\n<ul>\n<li>Strengths of Selenium 2\n</li>\n</ul>\n<ul>\n<li>How Selenium 2 is more pythonic\n<ul>\n<li>(Lots and lots of example code goes here.)\n</li>\n<li>Spoiler Alert: No Java server required!\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>How to test Android apps\n</li>\n<li>How to test iPhone apps\n</li>\n</ul>\n<ul>\n<li>Selenium development roadmap\n</li>\n</ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011TestingTheMobileAndDesktopWebWithSelenium20845.mp4", 
      "title": "Testing the Mobile (and Desktop) Web with Selenium 2.0 - Better, Faster, and more Pythonicly", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        548, 
        390, 
        549, 
        231, 
        489, 
        262, 
        550
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:21:22+00:00", 
      "source_url": "http://blip.tv/file/4883103", 
      "video_ogv_length": "141105384", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011TestingTheMobileAndDesktopWebWithSelenium20740.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011TestingTheMobileAndDesktopWebWithSelenium20598.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011TestingTheMobileAndDesktopWebWithSelenium20524.png", 
      "slug": "pycon-2011--testing-the-mobile--and-desktop--web-"
    }, 
    "model": "videos.Video", 
    "pk": 373
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        187
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Diversity in Tech: Improving our Toolset</p>\n<p>Presented by Jennifer Leech</p>\n<p>\nAs communities allow more diversity, they draw from a larger talent pool, challenge each other more, and hit a higher bar in terms of ingenuity and work-product. However questions surrounding diversity often seem under-examined. What are the effects of diversity in the community, or lack thereof? I intend to approach this topic from an accessible and entertaining, yet analytical perspective.\n</p>\n<p>Abstract</p>\n<p>\nLast year there was a photo of Kate Moss shown during a PyCon presentation which raised debate as to its appropriateness. This debate brought up some interesting questions - but what I found most interesting was that while it elicited strong opinions, the issue seemed to be somewhat unexamined. This event sparked a desire for deeper analysis on this topic in a more focussed setting.\n</p>\n<p>\nIn this talk, I intend to address some of the core principles underlying this debate. Discussion will include the following questions: Where does responsibility lie in understanding these issues? What are the effects of failing to do so? What are the effects of diversity in the community, or lack thereof? What do we lose by being more homogenous or more diverse? Gain?\n</p>\n<p>\nAs communities allow more diversity, they draw from a larger talent pool, challenge each other more, and hit a higher bar in terms of ingenuity and work-product. However, diversity requires awareness and tolerance on both the part of the dominant culture and on the part of the new arrivals to smooth the inevitable rough edges.\n</p>\n<p>\nI intend to approach this topic from an accessible, inclusive and entertaining, yet analytical perspective. The broader intent is to raise the level of understanding and community discourse on this topic. It is odd that diversity can so dramatically affect our lives and communities and yet be unexamined, particularly in a community so highly intelligent and educated as that which populates the tech industry.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011DiversityInTechImprovingOurToolset214.mp4", 
      "title": "Diversity in Tech: Improving our Toolset", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        551, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:15:09+00:00", 
      "source_url": "http://blip.tv/file/4883080", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011DiversityInTechImprovingOurToolset532.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011DiversityInTechImprovingOurToolset532.ogv\"\n  })\n</script>", 
      "video_ogv_length": "237809535", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011DiversityInTechImprovingOurToolset347.png", 
      "slug": "pycon-2011--diversity-in-tech--improving-our-tool"
    }, 
    "model": "videos.Video", 
    "pk": 374
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        188
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Python 3: the next generation is here already</p>\n<p>Presented by wesley chun</p>\n<p>\nThis talk is about the evolution of Python. We will discuss Python 2 and Python 3: what the compatibility issues are, what the main differences are, and also talk about migration, Python 2.6/2.7, and other transition tools.\n</p>\n<p>Abstract</p>\n<p>\nPython is currently at a crossroads: Python 2 has taken it from a quiet word-of-mouth language to primetime, with many companies around the world using it and an ever-increasing global marketshare of the programming world. But now comes Python 3, the first version of the language that is not backwards compatible with previous releases.\n</p>\n<p>\nWhat does this mean? Are all my Python programs going to break? Will I have to rewrite everything? How much time do I have? When is Python 2 going to be EOL'd? Is the language undergoing a complete rewrite and will I even recognize it? What are the changes between Python 2 and 3 anyway? Also, the next generation is already here, as Python 3 is over two years old now. What has been ported so far, and what is its current status? Are migration plans or transition tools available? If I want to start learning Python, should I do Python 2 or Python 3? Are all Python 2 books obsolete?\n</p>\n<p>\nWe will attempt to answer all of these questions and more. Join us!\n</p>\n<p>\nOUTLINE/TOPICS\n</p>\n<ul>\n<li>Python 2 vs. Python 3\n</li><li>Introduction to Python 3\n</li><li>Backwards Compatibility\n</li><li>Generational Changes\n</li><li>Key Differences\n</li><li>Role of Remaining Python 2.x releases\n</li><li>Transition & Migration Plans & Tools\n</li><li>Futures\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011Python3TheNextGenerationIsHereAlready574.mp4", 
      "tags": [
        391, 
        231, 
        489, 
        552, 
        392
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--python-3--the-next-generation-is-here", 
      "title": "Python 3: the next generation is here already", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:10:00+00:00", 
      "source_url": "http://blip.tv/file/4883045", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011Python3TheNextGenerationIsHereAlready988.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011Python3TheNextGenerationIsHereAlready988.ogv\"\n  })\n</script>", 
      "video_ogv_length": "189645810", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011Python3TheNextGenerationIsHereAlready624.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 375
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        121
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Firefox Sync</p>\n<p>Presented by Tarek Ziad\u00e9</p>\n<p>\nFirefox Sync let you access your history, passwords, bookmarks and even open tabs across all your devices, while remaining unreadable on the server through encryption. After a brief introduction on the Sync protocol, this talk will focus on the server, which is written in Python.\n</p>\n<p>Abstract</p>\n<p>\nThe talk will briefly explain how Syncing works then will focus on the Server architecture and code. You will discover through this talk how the server was built and what technologies it uses.\n</p>\n<ol>\n<li>Firefox Sync in numbers\n</li>\n<li>How synchronisation happens - the big picture\n<ol>\n<li>Desktop</li>\n<li>iPhone (Firefox Home)</li>\n</ol>\n</li>\n<li>How encryption works</li>\n<li>Overview of the APIs\n<ol>\n<li>Sync 1.1</li>\n<li>User 1.0</li>\n</ol>\n</li>\n<li>Server architecture\n<ol>\n<li>User &amp; Data storage</li>\n<li>Web Services</li>\n<li>Libraries used</li>\n</ol>\n</li>\n<li>Scaling and benchmarking<ol>\n<li>Grinder</li>\n<li>Funkload</li>\n</ol>\n</li>\n<li>Run your own server !</li>\n<li>What's Next</li>\n</ol>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011FirefoxSync705.mp4", 
      "tags": [
        56, 
        553, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Firefox Sync", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:06:36+00:00", 
      "source_url": "http://blip.tv/file/4883037", 
      "video_ogv_length": "154913682", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011FirefoxSync104.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011FirefoxSync104.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011FirefoxSync705-934.jpg", 
      "slug": "pycon-2011--firefox-sync"
    }, 
    "model": "videos.Video", 
    "pk": 376
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        189
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Using Coroutines to Create Efficient, High-Concurrency Web Applications</p>\n<p>Presented by Matt Spitz</p>\n<p>\nCreating high-concurrency python web applications is inherently difficult for a variety of reasons. In this talk, I'll discuss the various iterations of application server paradigms we've used at meebo, the advantages/disadvantages of each approach, and why we've settled on a coroutine-based WSGI setup to handle our high-concurrency web applications going forward.\n</p>\n<p>Abstract</p>\n<p>\nThere are a number of ways in which to create a web application in python. Some examples include a straight-up CGI scripts that run anew with each request, preforked Apache workers that each handle multiple requests, and using an asynchronous web framework like Twisted.\n</p>\n<p>\nAt meebo, we've settled on using gunicorn, a lightweight WSGI server, which supports gevent, a coroutine-based network library for python. Gevent monkeypatches python's system modules to make network requests asynchronous using an event loop based on libevent. This trick allows the developer to use a simple blocking CGI as a non-blocking web application that can handle many concurrent requests.\n</p>\n<p>\nI'll discuss our iteration process through these approaches to building web applications, why we ended up choosing gunicorn+gevent, the challenges this new framework presents, and how we've dealt with them.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011UsingCoroutinesToCreateEfficientHighConcurrency913.mp4", 
      "tags": [
        298, 
        554, 
        145, 
        555, 
        556, 
        231, 
        489, 
        225
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Using Coroutines to Create Efficient, High-Concurrency Web Applications", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T15:00:03+00:00", 
      "source_url": "http://blip.tv/file/4883016", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011UsingCoroutinesToCreateEfficientHighConcurrency343.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011UsingCoroutinesToCreateEfficientHighConcurrency343.ogv\"\n  })\n</script>", 
      "video_ogv_length": "195851560", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011UsingCoroutinesToCreateEfficientHighConcurrency731.png", 
      "slug": "pycon-2011--using-coroutines-to-create-efficient-"
    }, 
    "model": "videos.Video", 
    "pk": 377
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        42, 
        190, 
        191, 
        192, 
        193, 
        18
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>How to sell Python</p>\n<p>Presented by Daniel Greenfeld , C. Titus Brown , Dan Mesh , Chris Shenton , Rich Leland , Frank Wiles</p>\n<p>\nA lot of people want to use Python, but their customer, management, school, government, or organization won't let them. Python is a great tool, but it can be challenging to get in the door. This panel will explore how companies and individuals have successfully introduced Python, what tools are available to sell Python, and what pitfalls there are to avoid.\n</p>\n<p>Abstract</p>\n<p>\nA lot of people want to use Python, but their customer, management, school, government, or organization won't let them. Python is a great tool, but it can be challenging to get in the door. This panel will explore how companies and individuals have successfully introduced Python, what tools are available to sell Python, and what pitfalls there are to avoid.\n</p>\n<p>\nPossible questions will include:\n</p>\n<ul>\n<li>What is a good example success story you can share?\n</li><li>What pitfalls should you avoid?\n</li><li>How do you deal with organizations that have already spent bucketloads of money on a piss-poor technology stack, are hurting for it, but can't seem to let go?\n</li><li>How do you fight Fear-Uncertainty-Doubt (FUD) spread by people who stand to lose from introducing Python?\n</li><li>What tools are available to help sell Python?\n</li></ul>\n<p>\nFive panelists will be chosen from a broad spectrum of individuals including academic, government, for-profit organizations, and non-profit organizations.\n</p>\n<p>Speakers:</p>\n<ul>\n<li>Academia: C. Titus Brown\n</li><li>Goverment: Chris Shenton of Koansys/NASA\n</li><li>Large Commercial Organization: Dan Mesh of Evite\n</li><li>Small Commercial Organization: Frank Wiles of RevSys\n</li><li>Non-Profit Organization: Rich Leland of National Geographic\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011HowToSellPython925.mp4", 
      "title": "How to sell Python", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--how-to-sell-python", 
      "tags": [
        411, 
        231, 
        489, 
        557
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T14:53:46+00:00", 
      "source_url": "http://blip.tv/file/4882990", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011HowToSellPython835.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011HowToSellPython835.ogv\"\n  })\n</script>", 
      "video_ogv_length": "154279517", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011HowToSellPython286.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 378
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        194
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Pluggable Django Patterns</p>\n<p>Presented by Corey Oordt</p>\n<p>\nPluggable or reusable applications are a key feature of Django, but there is little guidance on writing them well. We'll dig into the different types of Django applications and coding patterns that make writing a reusable application easier. The talk also covers ways to avoid common implementation gotchas.\n</p>\n<p>Abstract</p>\n<p>\nReusable, or pluggable, applications are a powerful feature of Django. Your code can do more if written with a few ideas and techniques in mind. We'll cover:\n</p>\n<ul>\n<li>The four qualities of a pluggable application\n</li><li>The three types of Django applications\n</li><li>Ten common situations in implementing reusable code and coding patterns to handle them\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PluggableDjangoPatterns634.mp4", 
      "title": "Pluggable Django Patterns", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        0, 
        558, 
        559, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T14:48:02+00:00", 
      "source_url": "http://blip.tv/file/4882961", 
      "video_ogv_length": "150759615", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PluggableDjangoPatterns797.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PluggableDjangoPatterns797.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PluggableDjangoPatterns674.png", 
      "slug": "pycon-2011--pluggable-django-patterns"
    }, 
    "model": "videos.Video", 
    "pk": 379
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        195
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Optimal Aircraft Engine Tuner Selection in Python</p>\n<p>Presented by Jeffrey Armstrong</p>\n<p>\nA numerical algorithm for designing on-board aircraft engine diagnostics has been implemented in Python. Employing the optimization techniques within SciPy, the code performs a search for an optimal vector of parameters for estimating engine variables, including exhaust temperatures and thrust. The algorithm exploits the numerical strengths of Python and SciPy for speed and interoperability.\n</p>\n<p>Abstract</p>\n<p>\nAn emerging field of aircraft engine diagnostics is the inclusion of on-board engine performance tracking algorithms. These algorithms utilize data provided by a limited number of engine sensors to determine the current engine performance, which tends to degrade over time. However, estimating engine performance instantaneously is problematic due to the limited number of sensors normally available on a commercial aircraft engine.\n</p>\n<p>\nOne common practice is to estimate and track engine performance in software using a Kalman filter, a mathematical construct for tuning a numerical model to better track actual measurements (1). A new technique has been devised to optimize the design of this filter in aircraft engine applications (2). An optimization procedure to aid in the design of the filter has been implemented in Python and exercised against the significant number of minimization and optimization strategies available in SciPy. The talk focuses on the design of this optimization procedure in Python. The object-oriented nature of Python offers benefits over alternative numerical languages; speed, availability, and maintainability played central roles in the selection of Python as the implementation language. The availability of the multiprocessing module allowed for full utilization of modern multi-core CPUs, in contrast with often limited commercial numerical computing packages, further improving computational speed.\n</p>\n<p>\nSome difficulties were encountered during this design exercise. Discussion of these obstacles and their eventual solution is presented. Specifically, iterative solvers for the discrete algebraic Riccati equation and the discrete Lyapunov equation had to be authored in Python (3,4). Additional framework for working with discrete state-space control systems was created, exploiting the object-oriented features of the language (5).\n</p>\n<p>\nThe Python implementation was able to verify the solution of the optimization problem. Comparison with an alternative, reference MATLAB implementation will be presented briefly. The results of this research is planned to be presented at the American Society for Mechanical Engineers Turbo Expo 2011 Conference in June, 2011 (6). The algorithm design in Python is meant to showcase the ability to perform controls engineering tasks in the Python language efficiently.\n</p>\n<p>\n1. \u201cKalman Filter,\u201d Wikipedia: <a href=\"http://en.wikipedia.org/wiki/Kalman_filter\">http://en.wikipedia.org/wiki/Kalman_filter</a>\n</p>\n<p>\n2. Simon, D. L. and Garg, S., \u201cOptimal Tuner Selection for Kalman Filter-Based Aircraft Engine Performance Estimation\u201d. Journal of Engineering for Gas Turbines and Power. March 2010, Vol. 132.\n</p>\n<p>\n3. \u201cAlgebraic Riccati Equation,\u201d Wikipedia: <a href=\"http://en.wikipedia.org/wiki/Algebraic_Riccati_equation\">http://en.wikipedia.org/wiki/Algebraic_Riccati_equation</a>\n</p>\n<p>\n4. \u201cLyapunov Equation,\u201d Wikipedia: <a href=\"http://en.wikipedia.org/wiki/Lyapunov_equation\">http://en.wikipedia.org/wiki/Lyapunov_equation</a>\n</p>\n<p>\n5. \u201cState Space,\u201d Wikipedia: <a href=\"http://en.wikipedia.org/wiki/State-space\">http://en.wikipedia.org/wiki/State-space</a>\n</p>\n<p>\n6. Simon, D. L., Armstrong, J. B., \"Application of an Optimal Tuner Selection Approach for On-Board Self-Tuning Engine Models,\" Proceedings of the ASME Turbo Expo 2011, GT2011-46408, 2011 (To Be Published).\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011OptimalAircraftEngineTunerSelectionInPython133.mp4", 
      "title": "Optimal Aircraft Engine Tuner Selection in Python", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        560, 
        56, 
        231, 
        489, 
        198
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T14:44:08+00:00", 
      "source_url": "http://blip.tv/file/4882941", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011OptimalAircraftEngineTunerSelectionInPython563.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011OptimalAircraftEngineTunerSelectionInPython563.ogv\"\n  })\n</script>", 
      "video_ogv_length": "136860815", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011OptimalAircraftEngineTunerSelectionInPython133-714.jpg", 
      "slug": "pycon-2011--optimal-aircraft-engine-tuner-selecti"
    }, 
    "model": "videos.Video", 
    "pk": 380
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        196
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Algorithmic Generation of OpenGL Geometry</p>\n<p>Presented by Jonathan Hartley</p>\n<p>\nStarting from a basic 'hello world' OpenGL app, a simple and Pythonic model of 3D polyhedra is presented, with neat generators to convert these into ctype arrays for OpenGL. Geometric algorithms then generate some fun geometry, and these are compounded to produce successively more complex and interesting shapes.\n</p>\n<p>Abstract</p>\n<p>\nThe author's intent is to demonstrate that effective stylistic 3D graphics can be achieved using surprisingly small amounts of code. This hopefully makes the topic amenable to 3D beginners, while possibly suggesting some alternative approaches to those with 3D experience.\n</p>\n<p>Talk Outline</p>\n<p>\nThroughout, discussion of ideas and code dissection alternates with live animated demos, at 60fps on very modest hardware.\n</p>\n<ol>\n<li>Inspirations - Effective non-photo-realistic work in gaming, movies and the demo scene. (1m)\n</li><li>A convenient & Pythonic way to model 3D polyhedra, and some neat generators to convert these into OpenGL arrays at runtime. (7m)\n</li><li>Composition of polyhedra to create more complex shapes. (3m)\n</li><li>The resulting performance characteristics: What works well from Python, and what doesn't. (2m)\n</li><li>Koch tetrahedron & tetrix, aka Sierpinski tetrahedron. (1m)\n</li><li>Surprisingly effective 3D models created from small bitmaps. (1m)\n</li><li>Automatic generation of trees, mazes, complex spaces. (3m)\n</li><li>Algorithmic modification of existing shapes, such as bevels, geometric duals, and polyhedron stellation. (2m)\n</li><li>Shapes that morph: Rearranging vertices on the fly (5m)\n</li><li>Questions (5m)\n</li></ol>\n<p>\nThe ideas demonstrated in the talk are written against OpenGL 2.1, but written in a 'mostly OpenGL 3' style, using vertex buffer objects or vertex arrays.\n</p>\n<p>\nThe demo code uses pyglet to create a window and handle GUI events, and uses PyOpenGL for the majority of OpenGL calls, since it provides a more friendly and Pythonic interface. In the performance-sensitive inner render loop, however, I use pyglet's slightly more bare-bones OpenGL bindings.\n</p>\n<p>\nHowever, the majority of the talk focuses on the manipulation of abstract data structures to represent geometry, which is not affected by these or other OpenGL library choices.\n</p>\n<p>\nThis is a substantially improved version of the talk 'Flying High: Hobbyist OpenGL from Python', previously presented at EuroPython 2010.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011AlgorithmicGenerationOfOpenGLGeometry275.mp4", 
      "tags": [
        561, 
        562, 
        231, 
        489, 
        563, 
        564
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--algorithmic-generation-of-opengl-geom", 
      "title": "Algorithmic Generation of OpenGL Geometry", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T14:38:17+00:00", 
      "source_url": "http://blip.tv/file/4882916", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011AlgorithmicGenerationOfOpenGLGeometry392.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011AlgorithmicGenerationOfOpenGLGeometry392.ogv\"\n  })\n</script>", 
      "video_ogv_length": "171117418", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011AlgorithmicGenerationOfOpenGLGeometry275-566.jpg", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 381
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        197
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>SOLVCON: A New Python-Based Software Framework for Massively Parallelized Numerical Simulations</p>\n<p>Presented by Yung-Yu Chen</p>\n<p>\nSOLVCON is the first Python-based software framework for high-resolution simulations of multi-physics conservation laws. More than ninety percents of the codes are done in Python. Performance hot-spots are optimized by C and glued by ctypes library. SOLVCON is high-performance in nature and has been able to utilize 512 4-core nodes at Ohio Supercomputer Center.\n</p>\n<p>Abstract</p>\n<p>\nIn this decade, performance improvements of scientific computing will mainly come from major changes in the computing hardware. A well-organized software structure is imperative to accommodate such changes. Based on Python, SOLVCON (<a href=\"http://solvcon.net/\">http://solvcon.net/</a>) is designed as a software framework to develop conservation-law solvers by segregating solving kernels from various supportive functionalities. Being the governing equations for the physical world, conservation laws are applied everywhere in science and engineering. Although it is well known that the numerical algorithms and physical models form the kernel of any conservation-law solver, few if not none code can cleanly separate those core components from supportive functionalities. The lack of organization has hindered the development of legacy codes. To address the issues, the supportive functionalities are internalized in the framework of SOLVCON. Aided by the framework, both multi-physics and hybrid parallelism can be implemented in an organized way. To date, SOLVCON has utilized up to 512 4-core nodes at Ohio Supercomputer Center for high-resolution simulations of computational fluid dynamics (CFD). SOLVCON targets to concurrently utilize thousands of computer nodes for high-resolution simulations using over one billion mesh points.\n</p>\n<p>\nOne of the major purposes of SOLVCON is to resolve the complicated programming efforts for GPU clusters. Supercomputing is undergoing the third revolution by the emerging GPU computing. To date, the fastest supercomputer in the Top 500 list, Tianhe-1A, is a GPU cluster. GPU computing promises numerical analysts to reduce the time for the high-resolution simulations from months to days. In order to use GPU computing to accelerate such large-scale problems, GPU nodes must be networked together to form a GPU cluster. As such, shared-memory and distributed-memory parallelization must be simultaneously utilized to achieve the so-called hybrid parallelism. Parallel computing is difficult, and hybrid parallel computing is more difficult. By using Python to develop the fundamental software structure, GPU or multi-threaded programming for shared-memory parallelization are locked in solving kernels. Complex message-passing is implemented in SOLVCON and isolated from solving-kernel developers. Highly optimized C and GPU codes are glued into SOLVCON without loss of performance by using the ctypes package. Othere important features of SOLVCON include:\n</p>\n<ul>\n<li>Pluggable multi-physics.</li>\n<li>Built-in <a href=\"http://www.grc.nasa.gov/WWW/microbus/\">CESE</a> solvers.</li>\n<li>Unstructured mesh consisting of mixed elements.</li>\n<li>Interface to Message-Passing Interface (MPI) libraries.</li>\n<li>Socket communication layer: working without MPI installed.</li>\n<li>Automatic distributed-memory parallelization by domain decomposition.</li>\n<li>Parallel I/O.</li>\n<li>In situ visualization by <a href=\"http://vtk.org\">VTK</a> library.</li>\n<li>Standalone writers to VTK legacy and XML file formats.</li>\n<li>Integration to supercomputer (cluster) batch systems.</li>\n</ul>\n<p>\nSOLVCON has been applied to computation fluid dynamics and computational mechanics. More physical solvers are being developed for various propagating wave problems, e.g., electromagnetic waves. By using Python as the foundation in SOLVCON, performance and extensibility are well balanced, and computational research is being done in the most productive way. In this talk, the author of SOLVCON will make an introduction to the software framework by including the following topics:\n</p>\n<ol>\n<li>Simulations of conservation laws and hybrid parallelism for supercomputing.</li>\n<li>Issues in legacy codes and challenges to code for emerging supercomputer hardware.</li>\n<li>Using SOLVCON in the simple way by pre-defined modules.</li>\n<li>Fixed parts in SOLVCON.\n   <ol>\n<li>Distributed computing.</li>\n<li>Multi-thread utilities.</li>\n</ol>\n</li>\n<li>Customizable parts in SOLVCON.\n   <ol>\n<li>Pluggable multi-physics and GPGPU computing.</li>\n<li>Supercomputer batch system and bootstrapping.</li>\n<li>In situ visualization.</li>\n</ol>\n</li>\n<li>Conclusion.</li>\n</ol>\n<p>\nThe talk will take 30 minutes.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011SOLVCONANewPythonBasedSoftwareFrameworkForMass470.mp4", 
      "tags": [
        565, 
        566, 
        567, 
        231, 
        489, 
        568, 
        569
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "SOLVCON: A New Python-Based Software Framework for Massively Parallelized Numerical Simulations", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T14:35:53+00:00", 
      "source_url": "http://blip.tv/file/4882902", 
      "video_ogv_length": "147326868", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011SOLVCONANewPythonBasedSoftwareFrameworkForMass275.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011SOLVCONANewPythonBasedSoftwareFrameworkForMass275.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011SOLVCONANewPythonBasedSoftwareFrameworkForMass564.png", 
      "slug": "pycon-2011--solvcon--a-new-python-based-software-"
    }, 
    "model": "videos.Video", 
    "pk": 382
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        13
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Javascript for people who know Python</p>\n<p>Presented by Ian Bicking</p>\n<p>\nJavascript as a diff on Python.\n</p>\n<p>Abstract</p>\n<p>\nYou know Python. You should know Javascript. The two aren't so different, but this talk will explain exactly how they are different -- lists, dicts, objects, functions, loops and all the other details of Javascript described in terms of Python.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011JavascriptForPeopleWhoKnowPython665.mp4", 
      "tags": [
        507, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Javascript for people who know Python", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T14:30:50+00:00", 
      "source_url": "http://blip.tv/file/4882883", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011JavascriptForPeopleWhoKnowPython903.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011JavascriptForPeopleWhoKnowPython903.ogv\"\n  })\n</script>", 
      "video_ogv_length": "160200828", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011JavascriptForPeopleWhoKnowPython724.png", 
      "slug": "pycon-2011--javascript-for-people-who-know-python"
    }, 
    "model": "videos.Video", 
    "pk": 383
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        198
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Everything You Wanted To Know About Pickling, But Were Afraid To Ask!</p>\n<p>Presented by Richard T. Saunders</p>\n<p>\nSerializing data structures (in Python-speak \"pickling\") to save to disk/socket is an important tool for the programmer: We will discuss how the pickling protocols (0,1,2, and 3) work as well as real-world issues (gotchas, backwards-compatibility, etc). We will concentrate on the basics of this stack-based protocol: what it looks like, how to encode/decode, speeds of different implementations.\n</p>\n<p>Abstract</p>\n<p>\nThe Pickling Protocols are a fundamental tool for saving state.\n</p>\n<p>\nWe will discuss the differences between text serialization and Python pickling (as well as marshalling, and simple bit-blitting).\n</p>\n<p>\nWe will spend a little time discussing history: why there is a cPickle and pickle module in 2.x and only pickle in 3.x., and why there are 4 different protocols: 0,1,2 and 3.\n</p>\n<p>\nWe will then dive right in and look at how the stack-based protocol works. We will concentrate on the basics (the stack-based machine), as all the protocols adhere to this basic model, but tend to discuss the more recent protocols and their differences. We will also discuss how the memoization scheme works.\n</p>\n<p>\nWe will show some simple examples and then build to more complex examples.\n</p>\n<p>\nWe will also discuss the relative speeds: the different protocols (text, 0,1,2,3) and the different implementations (Python, Boost, PicklingTools, IronPython?, PyPy? Unladen Swallow?).\n</p>\n<p>\nWe will end with some real-world advice and some gotchas to watch out for (32-bit vs. 64-bit, different versions of Python serialize differently, etc.).\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011EverythingYouWantedToKnowAboutPicklingButWere914.mp4", 
      "title": "Everything You Wanted To Know About Pickling, But Were Afraid To Ask!", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--everything-you-wanted-to-know-about-p", 
      "tags": [
        314, 
        231, 
        489, 
        278
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T14:28:47+00:00", 
      "source_url": "http://blip.tv/file/4882867", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011EverythingYouWantedToKnowAboutPicklingButWere791.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011EverythingYouWantedToKnowAboutPicklingButWere791.ogv\"\n  })\n</script>", 
      "video_ogv_length": "170182015", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011EverythingYouWantedToKnowAboutPicklingButWere385.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 384
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        5
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<span><br />\n<p>Going Full Python -- Threadless</p>\n<p>Presented by Chris McAvoy</p>\n<p>\nThreadless is a 10 year old community based design company with an overpowering love of witty t-shirts and a mission to 'inspire awesomeness.' After 10 years of working primarily with PHP, Threadless has decided to use Python as our base development language. The decision was 10% technical and 90% touchy feely. We know what a powerful community can do to a product, and see the same sort of drive and passion in the Python community that we see in our own design community. Python is the peanut butter to our jelly. We're excited to share our jelly with you. Chris McAvoy, VP of Technology at Threadless (and the founder of the Chicago Python Users Group), will share a bit about the companies history, the role of technology in supporting the community at the core of the business, and why Python and Threadless are going to be totally BFF's.\n</p></span>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011GoingFullPythonThreadless807.mp4", 
      "title": "Going Full Python - Threadless", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        56, 
        231, 
        489, 
        570
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T14:23:31+00:00", 
      "source_url": "http://blip.tv/file/4882852", 
      "video_ogv_length": "107891792", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011GoingFullPythonThreadless639.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011GoingFullPythonThreadless117.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011GoingFullPythonThreadless741.png", 
      "slug": "pycon-2011--going-full-python---threadless"
    }, 
    "model": "videos.Video", 
    "pk": 385
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        188
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Running Django Apps on Google App Engine</p>\n<p>Presented by wesley chun</p>\n<p>\nIn the past, Django users couldn't run apps unmodified on Google App Engine. Some tools helped with integration but required you to change your data models. Django-nonrel removes this requirement letting you run native Django apps on App Engine with only config changes if you bear in mind its restrictions like no JOINs. In this talk, we'll discuss Django-nonrel & porting App Engine apps to Django.\n</p>\n<p>Abstract</p>\n<p>\nPreviously, Django users could not get their apps to run unmodified on Google App Engine, the cloud application-hosting platform. Older tools like \"the Helper\" and \"the Patch\" required a change to the data models as well as perhaps integrating additional tools into the application source tree. The creators of the Patch realized how cumbersome this is and created a replacement for all of these older tools.\n</p>\n<p>\nDjango-nonrel allows users to run pure Django apps on App Engine with only minor configuration changes. It basically enables Django's ORM to operate on top of non-relational databases (in addition to preserving its ability to support standard relational DBs), one of which is Google App Engine's Datastore. (MongoDB is another.)\n</p>\n<p>\nWhat this means that current Django users can now use their existing knowledge to write apps for App Engine as long as they keep App Engine restrictions in mind, e.g., no JOINs. Projects written in this manner will work without any modifications other than changing the configuration settings. On the other side, App Engine developers now have an alternative to the '\"webapp\" framework that comes with its SDK. You can now leverage the power of a full web framework like Django and still enjoy the flexibility and scalability of App Engine. In this talk, we'll discuss Django-nonrel, and how to port App Engine apps from webapp to pure Django to run on App Engine using Django-nonrel.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011RunningDjangoAppsOnGoogleAppEngine927.mp4", 
      "title": "Running Django Apps on Google App Engine", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        0, 
        571, 
        251, 
        252, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T07:22:49+00:00", 
      "source_url": "http://blip.tv/file/4881543", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011RunningDjangoAppsOnGoogleAppEngine109.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011RunningDjangoAppsOnGoogleAppEngine109.ogv\"\n  })\n</script>", 
      "video_ogv_length": "187347634", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011RunningDjangoAppsOnGoogleAppEngine570.png", 
      "slug": "pycon-2011--running-django-apps-on-google-app-eng"
    }, 
    "model": "videos.Video", 
    "pk": 386
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        127
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>The Pyramid FAQ</p>\n<p>Presented by Carlos de la Guardia</p>\n<p>\nThe #pylons IRC channel is the most common way of giving support to users of the Pyramid framework. In this talk we take away some of the most often discussed topics in the channel and give detailed answers to them.\n</p>\n<p>Abstract</p>\n<p>\nEvery development project has a few questions and doubts that seem to come up on its support channels every now and then. The Pyramid framework is no exception.\n</p>\n<p>\nIn this talk, we introduce Pyramid related FAQs using the chat logs and proceed to discuss them in detail. Showing the logs allows us to give the talk a lighter side and makes for an introduction to each topic based on real user questions.\n</p>\n<p>\nTopics covered here include:\n</p>\n<ul>\n<li>Configuration objects.\n</li><li>Object traversal versus URL dispatch.\n</li><li>Context and views.\n</li><li>Authentication and authorization.\n</li><li>How much 'Zope stuff' is there in Pyramid and can we take it away?\n</li><li>Examples of how Pyramid enables the Pylons philosophy of integrating best of breed or preferred components.\n</li><li>The future of Pyramid and Pylons.\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011ThePyramidFAQ994.mp4", 
      "tags": [
        231, 
        489, 
        572
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--the-pyramid-faq", 
      "title": "The Pyramid FAQ", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T07:20:45+00:00", 
      "source_url": "http://blip.tv/file/4881537", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011ThePyramidFAQ855.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011ThePyramidFAQ855.ogv\"\n  })\n</script>", 
      "video_ogv_length": "133736688", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011ThePyramidFAQ994-532.jpg", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 387
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        199
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Jython Concurrency</p>\n<p>Presented by Jim Baker</p>\n<p>\nJython is arguably the best Python implementation to target concurrent code. Jython has no GIL, it leverages the Java platform to provide robust support for concurrency in its runtime, and it enables access to a set of high-level abstractions from Java. This talk will walk through at the extreme level pertinent Jython implementation details and a series of examples, including Java integration.\n</p>\n<p>Abstract</p>\n<p>\nJython implements the Python language, but we leverage the underlying Java platform to provide an opionated alternative to CPython in our support of concurrency.\n</p>\n<p>\nBecause of the GIL and related infrastructure, CPython cannot use a model in which threads perform concurrent computation defined in Python on shared objects in the same process. (Of course, there are workarounds, such as multiprocessing or using C extensions.)\n</p>\n<p>\nIn contrast, there's no GIL in Jython. Jython instead embraces threads, provides extensive support for managing their execution and coordination through standard Java platform functionality (java.util.concurrent), and threaded code works well with Jython's implementation of standard mutable collection types. Lastly, the underlying JVM provides extensive instrumentation as well as the ability to set a variety of parameters, including choice of GC. There are also the inevitable pitfalls that might be seen in complex architectures, such as around the use of ClassLoaders.\n</p>\n<p>\nThis talk will go into a detailed discussion of some of the interesting ramifications of these design points and how they can be effectively applied to write concurrent code, as illustrated through a variety of short examples.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011JythonConcurrency831.mp4", 
      "tags": [
        255, 
        573, 
        9, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Jython Concurrency", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T07:18:31+00:00", 
      "source_url": "http://blip.tv/file/4881528", 
      "video_ogv_length": "158021961", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011JythonConcurrency747.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011JythonConcurrency747.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011JythonConcurrency940.png", 
      "slug": "pycon-2011--jython-concurrency"
    }, 
    "model": "videos.Video", 
    "pk": 388
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        35
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv</p>\n<p>Presented by Carl Meyer</p>\n<p>\nPip and virtualenv: many use them; not so many understand just how they work their magic. If you're a pip/virtualenv user but haven't yet dared crack the lid (or you have, and found it a bit difficult to follow), come along for a fast-paced guided tour. Knowing these tools will help you make more effective use of them, and might also turn you into a contributor.\n</p>\n<p>Abstract</p>\n<p>\nPip and virtualenv are widely used in the Python world, but for the size of their user base don't receive many code contributions, and many users have misconceptions about how they actually work.\n</p>\n<p>\nThis talk will cover a bit of advanced use of pip and virtualenv, but mostly we'll dive into the source code, mapping it out with a high-level view and diving into the guts of particularly interesting bits. By the end of the talk, you'll have a good idea exactly how pip and virtualenv do their magic, and where to go looking in the source for particular behaviors or bug fixes. We'll walk through the creation of a virtualenv step-by-step, and trace a typical \"pip install -r requirements.txt\" and \"pip uninstall\" through the code paths they follow.\n</p>\n<p>\nI'll know the talk was a success when I see the pull requests!\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011ReverseengineeringIanBickingsBrainInsidePipAnd878.mp4", 
      "tags": [
        94, 
        231, 
        489, 
        146
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Reverse-engineering Ian Bicking's brain: inside pip and virtualenv", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T07:16:18+00:00", 
      "source_url": "http://blip.tv/file/4881525", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011ReverseengineeringIanBickingsBrainInsidePipAnd303.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011ReverseengineeringIanBickingsBrainInsidePipAnd303.ogv\"\n  })\n</script>", 
      "video_ogv_length": "151377423", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011ReverseengineeringIanBickingsBrainInsidePipAnd764.png", 
      "slug": "pycon-2011--reverse-engineering-ian-bicking--39-s"
    }, 
    "model": "videos.Video", 
    "pk": 389
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        200
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Django: Pitfalls I Encountered and How to Avoid Them</p>\n<p>Presented by Luke Sneeringer</p>\n<p>\nAre you starting a moderate to large sized Django project? Do you need to plan ahead and build an application that will react to unanticipated needs? This talk covers some techniques and pitfalls I encountered in writing my first reasonably large Django site, and what I did differently the second time I started a project.\n</p>\n<p>Abstract</p>\n<p>\nWhen working on a company product, especially one where developers don't always have full control over the scope and needs of the application, it's important to plan ahead for unanticipated needs.\n</p>\n<p>\nThis talk will cover simple tricks and methods that are a small amount of work up front, but can save you lots of time later.\n</p>\n<p>PyCon Talk Outline</p>\n<ol>\n<li>Introduction (5m)\n<ul>\n<li>Me!\n\n</li>\n</ul>\n</li>\n<li>Making Mistakes\n<ul>\n<li>It happens. \"Code quality can be measured by the number of WTFs per minute in the code review.\"\n</li>\n<li>When dealing with a big, expansive framework like Django, sometimes you just don't know that something is there. Good docs don't completely solve this...there's always going to be the thing you don't find. Similarly, sometimes you don't realize how to leverage something that you do know about until much later.<br />\n<br />\n My regrets with my current project aren't sweeping architectural issues. I did most of the big stuff right. My regrets are mostly small things that, because it was my first big project, there was this piece or that piece that I didn't see or didn't fully appreciate, and so now I have little blocks of code that are tougher to maintain than they need to be. End of the world? No. Worth thinking through for next time? Yes.\n</li>\n</ul>\n</li>\n<li>Some trivial things (10m)\n\n<ul>\n<li>Preface: Yeah, some of these are dumb.\n</li>\n<li>Beginning at the beginning: Project Setup\n<ul>\n<li>I had sys.path pointing to the directory above the project root, like the tutorial does. I wish I hadn't done that.\n</li>\n<li>Need to run two instances on the same box that don't share the actual codebase (e.g. a staging server)? You still can, but it's more awkward. Better to set sys.path at your project root.\n</li>\n</ul>\n</li>\n<li>Dude, where's my Media class?\n<ul>\n<li>How did I do it? First I had a magic template variable. Then I copied Form.Media\n</li>\n<li>Then, on a later project, I realized a block works just fine.\n</li>\n</ul>\n</li>\n<li>My boss wants ____ available on every page!\n<ul>\n<li>How did I do it? I had a method we called everywhere that took arbitrary keyword arguments...\n</li>\n<li>Oh, there's TEMPLATE_CONTEXT_PROCESSORS...\n<ul>\n<li>...if you manually use RequestContext every time! So, just do that. Always. Even if you don't need it.\n</li>\n<li>I want .select_related('something') every time!\n</li>\n<li>...so I typed it! A lot.\n</li>\n<li>Oh, that can be done by overriding def queryset on the manager class? That's easier to maintain...\n<ul>\n<li>...but make sure you set the flag to use it on related fields!\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>We need sample data for so-and-so, such-and-such...\n<ul>\n<li>Disclaimer: This one actually isn't mine; my boss did it. But, it's amusing, and worth mentioning.\n</li>\n<li>We needed sample data so my boss could preview themes...so he set up a second database, put in fake data, and hard-coded it in the app-wide (not server-specific) settings.py.\n<ul>\n<li>Copied the entire DB structure...at the time. But it changes.\n</li>\n<li>Oh, and the unit testing framework didn't appreciate it, either.\n</li>\n</ul>\n</li>\n<li>Fixtures are the right way (and sooner or later I'll get this fixed...it's still there).\n<ul>\n<li>(space reserved for my stumbling upon something else silly, and hopefully humorous, that I did wrong)\n<ol>\n<li>How to avoid missing trivial things?\n</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Read the documentation. Over and over.\n</li>\n<li>Become familiar with the Django code.\n\n</li>\n</ul>\n</li>\n<li>A non-trivial thing: Forms (10m)\n<ul>\n<li>Django forms can do anything...given sufficient shenanigans. Always do it the Django forms way; your life will be easier.\n</li>\n<li>Forms and ModelForms are static, and I needed dynamic choices on a form...\n<ul>\n<li>...so I just ditched newforms\n</li>\n<li>But wait, this is Python. A trivial function that calls the metaclass can solve this problem!\n<ul>\n<li>This looks complicated, but it's not. Walk through how to do it.\n</li>\n<li>It's quite maintainable, and you get all the other bells and whistles.\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Questions? (5m)</li>\n</ol>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011DjangoPitfallsIEncounteredAndHowToAvoidThem207.mp4", 
      "title": "Django: Pitfalls I Encountered and How to Avoid Them", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--django--pitfalls-i-encountered-and-ho", 
      "tags": [
        0, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T07:15:45+00:00", 
      "source_url": "http://blip.tv/file/4881521", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011DjangoPitfallsIEncounteredAndHowToAvoidThem728.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011DjangoPitfallsIEncounteredAndHowToAvoidThem728.ogv\"\n  })\n</script>", 
      "video_ogv_length": "125634555", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011DjangoPitfallsIEncounteredAndHowToAvoidThem207-415.jpg", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 390
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        201
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Best Practices for Impossible Deadlines</p>\n<p>Presented by Christopher Groskopf</p>\n<p>\nAt the Chicago Tribune we develop, test, and deploy production web applications on schedules that range from two hours to two months. This talk will discuss the tools and techniques that allow us to make our deadlines, including automated deployments, frameworks, just-in-time testing, and more. Attention will be paid to <a href=\"http://github.com/newsapps/beeswithmachineguns\">http://github.com/newsapps/beeswithmachineguns</a> and the problems they solve.\n</p>\n<p>Abstract</p>\n<p>\nOn my first day at the Chicago Tribune I was given a CSV of data about defoliant spraying in Vietnam and told to build this: Agent Orange. What followed was one of the most stressful and difficult weeks of my life, during which I learned an incredible amount about web development. I had to stop thinking about databases and start thinking about serialized JSON structures stashed on S3; stop thinking about building tools and start thinking about mashing up tech that was never designed to be married (in this case Simile Timeline and Google Maps); stop thinking about idealistic development practices and start thinking about getting a working product out the door. In short: I had to rewire my brain for news.\n</p>\n<p>\nThis talk will go in-depth on deadline-oriented strategies that I've learned in a year of building news applications. Some of these revolve around specific technologies, like fabric for single-keystroke deployments or Varnish for caching, but most will be matters of practice, like what to test when you have no time for testing or how to avoid (yes, avoid!) database migrations.\n</p>\n<p>\nThey say Django is \"the web framework for perfectionists with deadlines.\" This is their Art of War.\n</p>\n<p>Talk outline:</p>\n<ul>\n<li>An anecdote: Agent Orange\n</li><li>We can't have nice things (or best practices)\n</li><li>Low-hanging fruit: staging environment, git branches, PEP8.\n</li><li>Only build it once: Iterations, interviews and stakeholders\n</li><li>Salvage, share and steal [code]\n</li><li>Keeping track: Be a ticketing warrior\n</li><li>Tools improve faster than you do: iterate your stack\n</li><li>Single-keystroke deployment (fabric)\n</li><li>Migrations are hard: Building read-only apps\n</li><li>Don't serve that: Using S3 for hosting\n</li><li>Caching > optimization (varnish)\n</li><li>Know your load limits (beeswithmachineguns)\n</li><li>Configuration-as-application: application frameworks (maps, tables)\n</li><li>Pair programming > functional testing &gt; unit testing\n</li><li>except UseWordpress, e: print \"No, really\"\n</li></ul>\n<p>\nSites that will be used as examples:\n</p>\n<ul>\n<li>Agent Orange\n</li><li>Burr Oak Memorial\n</li><li>Census 2010: Cook county participation rates map\n</li><li>Area judges and supervision rates of speeders table\n</li><li>RedEye Homicide Tracker\n</li><li>Chicago Tribune Elections Center\n</li><li>2010 Illinois School Report Cards\n</li><li>TribLocal\n</li></ul>\n", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011BestPracticesForImpossibleDeadlines540.mp4", 
      "title": "Best Practices for Impossible Deadlines", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        574, 
        147, 
        56, 
        0, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T07:12:32+00:00", 
      "source_url": "http://blip.tv/file/4881519", 
      "video_ogv_length": "142203515", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011BestPracticesForImpossibleDeadlines761.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011BestPracticesForImpossibleDeadlines761.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011BestPracticesForImpossibleDeadlines540-981.jpg", 
      "slug": "pycon-2011--best-practices-for-impossible-deadlin"
    }, 
    "model": "videos.Video", 
    "pk": 391
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        202
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Testing with mock</p>\n<p>Presented by Michael Foord</p>\n<p>\nmock is a Python testing library. It has the goal of making mocking in tests brain dead simple! mock provides the Mock class and the patch decorator for safely patching out the objects you are mocking in your tests. This talk will cover standard mocking patterns. We'll also look at some of the newer features in the latest release, including support for mocking magic methods.\n</p>\n<p>Abstract</p>\n<p>\nmock provides a core Mock class that removes the need to create a host of trivial stubs throughout your test suite. After performing an action, you can make assertions about which methods / attributes were used and arguments they were called with. You can also specify return values and set specific attributes in the normal way.\n</p>\n<ul>\n<li><a href=\"http://www.voidspace.org.uk/python/mock/\">http://www.voidspace.org.uk/python/mock/</a>\n</li><li><a href=\"http://pypi.python.org/pypi/mock/\">http://pypi.python.org/pypi/mock/</a>\n</li></ul>\n<p>\nThe mock module also provides a patch() decorator that handles safely patching out the things you are mocking during your test.\n</p>\n<p>\nWe'll cover standard mocking patterns, and how mock makes them easy. We'll also be looking at some of the newer features in the latest release, including the magic method support that can be used (for example) for mocking out objects used as context managers.\n</p>\n<p>\nmock is designed for \"unit test style\" testing, but is used with Python testing libraries like nose and py.test.\n</p>\n<p>\nThere will be some emphasis on how *not* to use mocking in testing, and why 'over mocking' is bad (and makes for brittle tests).\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011TestingWithMock964.mp4", 
      "title": "Testing with mock", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        575, 
        231, 
        489, 
        21
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T07:10:38+00:00", 
      "source_url": "http://blip.tv/file/4881513", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011TestingWithMock108.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011TestingWithMock108.ogv\"\n  })\n</script>", 
      "video_ogv_length": "171633013", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011TestingWithMock498.png", 
      "slug": "pycon-2011--testing-with-mock"
    }, 
    "model": "videos.Video", 
    "pk": 392
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        203
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>An Open success for the cloud: OpenStack</p>\n<p>Presented by Andy Smith</p>\n<p>\nOpenStack is a collection of open source technologies written entirely in Python, delivering a massively scalable cloud operating system. OpenStack is currently developing two interrelated projects: OpenStack Compute and OpenStack Object Storage. OpenStack Compute is software to provision and manage large groups of virtual private servers, and OpenStack Object Storage is software for creating redundant, scalable object storage using clusters of commodity servers to store terabytes or even petabytes of data. </p>\n<p>\nThis talk will go into details about the success of OpenStack with Python, limitations and how overall, Python was the right technology choice.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011AnOpenSuccessForTheCloudOpenStack644.mp4", 
      "tags": [
        546, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--an-open-success-for-the-cloud--openst", 
      "title": "An Open success for the cloud: OpenStack", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T07:09:51+00:00", 
      "source_url": "http://blip.tv/file/4881507", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011AnOpenSuccessForTheCloudOpenStack881.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011AnOpenSuccessForTheCloudOpenStack842.ogv\"\n  })\n</script>", 
      "video_ogv_length": "117480009", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011AnOpenSuccessForTheCloudOpenStack791.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 393
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        204
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Python for High Performance Computing</p>\n<p>Presented by William Scullin</p>\n<p>\nPython is becoming increasingly popular within the high performance computing community. While it initially gained traction as a scripting language, Python's role has continued to expand with Python applications for science scaling to hundreds of thousands of cores and bindings to high performance libraries becoming commonplace. This talk is meant as an overview of Python's role in the HPC space.\n</p>\n<p>Abstract</p>\n<p>\nThis talk is focused on raising awareness of Python in the high performance computing space. Specific topics include:\n</p>\n<ul>\n<li>building the Python interpreter for speed\n</li><li>an overview of bindings to numerical libraries\n</li><li>using GPUs and accelerators with Python\n</li><li>scaling codes with MPI\n</li><li>issues when scaling on very large systems\n</li><li>an overview of successful science codes\n</li><li>a live demonstration of Python running on 163,840 cores\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonForHighPerformanceComputing882.mp4", 
      "tags": [
        576, 
        577, 
        578, 
        579, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Python for High Performance Computing", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T04:51:05+00:00", 
      "source_url": "http://blip.tv/file/4881240", 
      "video_ogv_length": "168164468", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonForHighPerformanceComputing857.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PythonForHighPerformanceComputing857.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PythonForHighPerformanceComputing720.png", 
      "slug": "pycon-2011--python-for-high-performance-computing"
    }, 
    "model": "videos.Video", 
    "pk": 394
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        177
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Useful Namespaces: Context Managers and Decorators</p>\n<p>Presented by Jack Diederich</p>\n<p>\nPython has two useful conventions for \"I mean it, but only here\" and you can say it with Context Managers and Decorators. Both give you the power to define a push/pop of a resource for a set period inside a namespace, be it a function or a level of indentation. This talk is a list of patterns that are implemented by one or the other (including some clever functions that are both).\n</p>\n<p>Abstract</p>\n<ul>\n<li>Decorators, formal definition.\n</li><li>Context Managers, formal definition.\n</li><li>Informal definition: both have the opportunity to do and then undo. - very similar to C++ RIIA \"Resource Acquisition Is Initialization.\" - Context Managers were designed to do that but decorators are frequently just as good.\n</li><li>Which one to use use when is all about namespaces. - Context Managers manipulate at the block level. - Function Decorators manipulate the function level. - Class Decorators manipulate at the class level.\n</li><li>Recipes on writing decorators and context managers - Familiar examples from Django and Mock.\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011UsefulNamespacesContextManagersAndDecorators841.mp4", 
      "tags": [
        477, 
        340, 
        321, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Useful Namespaces: Context Managers and Decorators", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T04:50:37+00:00", 
      "source_url": "http://blip.tv/file/4881235", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011UsefulNamespacesContextManagersAndDecorators777.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011UsefulNamespacesContextManagersAndDecorators777.ogv\"\n  })\n</script>", 
      "video_ogv_length": "127109542", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011UsefulNamespacesContextManagersAndDecorators353.png", 
      "slug": "pycon-2011--useful-namespaces--context-managers-a"
    }, 
    "model": "videos.Video", 
    "pk": 395
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        205
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>An outsider's look at co-routines.</p>\n<p>Presented by Peter Portante</p>\n<p>\nLet's take an outsiders look at coroutines, the underlying concept used by greenlets. First we'll define what they are conceptually, and show some typical use cases. Then we'll take a look at a sampling of the implementations out there to see what they are actually doing to implement the concept. Finally, we'll show their pluses and minuses, and highlight some features of packages that use them.\n</p>\n<p>Abstract</p>\n<p>Talk outline:</p>\n<ul>\n<li>Define what a coroutine is\n   <ul>\n<li>Coroutine state not known to operating system\n   </li><li>Difference between a thread or process\n   </li><li>What state is required for tracking\n   </li></ul>\n</li><li>Show how coroutines are used\n   <ul>\n<li>gevent example\n   </li><li>concurrence example\n   </li></ul>\n</li><li>Review two implementations\n   <ul>\n<li>Greenlets\n   </li><li>Python based co-routines using generators\n   </li></ul>\n</li><li>Advantages/Disadvantages\n</li><li>Differentiating features of packages that use them\n   <ul>\n<li>Concurrence\n   </li><li>Gevent\n   </li><li>Eventlets\n</li></ul></li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011AnOutsidersLookAtCoroutines790.mp4", 
      "title": "An outsider's look at co-routines.", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--an-outsider--39-s-look-at-co-routines", 
      "tags": [
        580, 
        298, 
        554, 
        581, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T04:46:14+00:00", 
      "source_url": "http://blip.tv/file/4881229", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011AnOutsidersLookAtCoroutines392.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011AnOutsidersLookAtCoroutines392.ogv\"\n  })\n</script>", 
      "video_ogv_length": "129516368", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011AnOutsidersLookAtCoroutines790-929.jpg", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 396
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        122
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Scaling Python past 100</p>\n<p>Presented by Mark Ramm</p>\n<p>\nSourceforge.net has been in the top 100 sites on the internet, and we discovered that python was easily able to scale up to handle that traffic. In fact Python is now the core language for all new features, and is taking over all of sourceforge.net.\n</p>\n<p>Abstract</p>\n<p>\nThe path from legacy PHP to modern python tools has been long an bumpy, and this is the story of how we took Python from a single prototype site, to the core technology driving SourceForge.net. I will discuss the mistakes we made along the way, the benefits that sold python, and the real secret behind our python transformation.\n</p>\n<p>A few highlights include:</p>\n<ul>\n<li>How we abused libraries for fun and profit\n</li><li>How a major mistake made us look good\n</li><li>How the python community worked for us\n</li><li>How we couldn't have done it without Django AND TurboGears\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011ScalingPythonPast100645.mp4", 
      "title": "Scaling Python past 100", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        56, 
        0, 
        231, 
        489, 
        582, 
        210, 
        230
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T04:44:34+00:00", 
      "source_url": "http://blip.tv/file/4881226", 
      "video_ogv_length": "148412657", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011ScalingPythonPast100784.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011ScalingPythonPast100784.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011ScalingPythonPast100645-312.jpg", 
      "slug": "pycon-2011--scaling-python-past-100"
    }, 
    "model": "videos.Video", 
    "pk": 397
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        206
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>How to write obfuscated python</p>\n<p>Presented by Rev. Johnny Healey</p>\n<p>\nWith its clean, highly readable syntax, Python would seem to be quite a challenge for a programmer attempting to write obfuscated code. Fortunately, it provides a wide variety of high-level abstractions that can be misused in exciting ways. This survey of obfuscation strategies will include topics such as decorator abuse, lambda calculus, and bytecode manipulation.\n</p>\n<p>Abstract</p>\n<p>\nPython's clean syntax can make traditional approaches to writing obfuscated code much more challenging. Fortunately, Python provides many useful abstractions that can be misused to write code that is unreadable or even deliberately misleading. This talk will provide a survey of silly python tricks that explore the boundaries of the language.\n</p>\n<p>Topics</p>\n<ul>\n<li>Redefining builtins\n</li><li>Rarely used syntax\n</li><li>Comparison edge cases\n</li><li>Things you probably shouldn't do with decorators\n</li><li>Fun with lambdas\n</li><li>Bytecode manipulation\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011HowToWriteObfuscatedPython158.mp4", 
      "title": "How to write obfuscated python", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        583, 
        584, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T04:44:07+00:00", 
      "source_url": "http://blip.tv/file/4881220", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011HowToWriteObfuscatedPython163.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011HowToWriteObfuscatedPython163.ogv\"\n  })\n</script>", 
      "video_ogv_length": "137062698", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011HowToWriteObfuscatedPython160.png", 
      "slug": "pycon-2011--how-to-write-obfuscated-python"
    }, 
    "model": "videos.Video", 
    "pk": 398
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        207
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>MongoDB + Pylons at Catch.com: Scalable Web Apps with Python and NoSQL</p>\n<p>Presented by Niall O'Higgins</p>\n<p>\nThe Catch.com backend provides an API for publishing and querying your personal data - used by many hugely popular Android, iOS and Web clients. We ported this system to Python and MongoDB, using the Pylons Web framework. This talk details our reasoning for choosing - and experiences with - these cutting-edge Web and NoSQL database technologies in a high-traffic, real-world production system.\n</p>\n<p>Abstract</p>\n<p>\nFaced with the limits of our initial Catch.com Java/BDB backend implemention, we evaluated various alternative technologies including Amazon SimpleDB, MySQL, Cassandra and MongoDB. Eventually we settled on Python, Pylons and MongoDB.\n</p>\n<p>\nWe found Python and MongoDB gave us unique flexibility with our data model, allowed us to scale for increased reliability and performance and decreased feature development time - and in this talk we'll describe exactly how.\n</p>\n<p>\nWhile there are many advantages, Python/Pylons and MongoDB (as a relative newcomer on the database scene) certainly have issues and limitations which must be taken into careful consideration for any real-world production deployment.\n</p>\n<p>\nWe compare MongoDB with other database technologies such as more traditional RDBMS like MySQL and competing NoSQL options such as Cassandra, CouchDB and BDB.\n</p>\n<p>\nWe give a detailed introducton to data modeling in MongoDB - with special attention paid to how this differs from a traditional relational system - the operators provided by its rich query language and utilizing advanced features such as GeoSpatial indexing, Replica Sets, Sharding - and how to deal with some of the more publicized limitations of the system (such as single-server durability).\n</p>\n<p>\nWhile much of this talk will be about using MongoDB with Python, we will also touch on issues surrounding production deployment of the Pylons Web framework, including how we work around the GIL to take advantage of multi-core machines.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011MongoDBPylonsAtCatchcomScalableWebAppsWithPy842.mp4", 
      "tags": [
        56, 
        381, 
        57, 
        231, 
        489, 
        229, 
        585
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--mongodb---pylons-at-catch-com--scalab", 
      "title": "MongoDB + Pylons at Catch.com: Scalable Web Apps with Python and NoSQL", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T04:42:34+00:00", 
      "source_url": "http://blip.tv/file/4881217", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011MongoDBPylonsAtCatchcomScalableWebAppsWithPy445.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011MongoDBPylonsAtCatchcomScalableWebAppsWithPy445.ogv\"\n  })\n</script>", 
      "video_ogv_length": "138131245", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011MongoDBPylonsAtCatchcomScalableWebAppsWithPy842-535.jpg", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 399
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        208
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Large Scale Data Conditioning & Processing with Stackless Python and Pypes</p>\n<p>Presented by Eric Gaumer</p>\n<p>\nPypes is a component oriented framework for designing dataflow applications. It uses Stackless Python to model components as computational entities that operate by sending and receiving messages. Components are designed to process streams of data modeled as a series of messages which are exchanged asynchronously. Data streams are initiated over an asynchronous REST interface.\n</p>\n<p>Abstract</p>\n<p>\nThere's been some recent momentum around data flow programming with a number of new frameworks having been released. This new found interest is due largely in part to the increasing amount of data being produced and consumed by applications. MapReduce has become a general topic of discussion for analytics over large data sets but it's increasingly evident that it's not a panacea.\n</p>\n<p>\nSimple batch processing tools like MapReduce and Hadoop are just not powerful enough in any one of the dimensions of the big data space that really matters. One particular area where MapReduce falls short is in near real-time search. It used to be common to run batch processing jobs on a nightly basis which would index the days events, making them searchable.\n</p>\n<p>\nGiven today's social dynamics, people have come to expect instant access to data as opposed to a daily digest. Batch oriented semantics are being superseded by event driven architectures that act on live, real-time streams of data. This shift in paradigm has sparked new interest in dataflow concepts.\n</p>\n<p>\nDataflow frameworks promote the data to become the main concept behind any program. It becomes a matter of \"data-flow\" over \"control-flow\" where processes are just the way data is created, manipulated and destroyed. This concept is well represented in the Unix operating system which pipes data between small single-purpose tools to produce more sophisticated applications.\n</p>\n<p>\nPypes is a dataflow framework that leverages Stackless Python to model processes as black box operations that communicate by sending and receiving messages. These processes are naturally component oriented allowing them to be connected in different ways to form new applications. Components are inherently stateless making parallel processing relatively simple. Because a component is an abstraction of a Stackless tasklet (true coroutines), expensive setups such as loading machine learning models are done once during initialization and can then be used throughout the life of the component. This is in contrast to MapReduce frameworks that typically incur this overhead each time the map function is called or try to manage some sort of global state.\n</p>\n<p>\nOne aspect that differentiates Pypes from other dataflow frameworks is its \"push\" model. Unlike generator based solutions which pull data through the system, Pypes provides a RESTful interface that allows data to be pushed in. This allows Pypes to sit more natural as an event driven middleware component in the context of a larger architecture. A data push model also simplifies scalability since an entire cluster of nodes can be setup behind a load balancer which will then automatically partition the incoming data stream. Generator based \"pull models\" cannot easily partition data without somehow coordinating access to the data which involves global state.\n</p>\n<p>\nPypes was designed to be a highly scalable, event driven, dataflow scheduling and execution environment. Writing your own components is simple and Pypes provides Paste templates for creating new projects. Components are packaged as Python eggs and discovered automatically. They can be wired together using a visual editor that runs in any HTML5 compliant browser. Pypes supports Directed Acyclic Graphs and data streams are modeled as a series of JSON (dict) packets which support meta-data at both the packet level and the field level.\n</p>\n<p>\nPypes also leverages the Python multiprocessing module to scale up. Data arriving through the REST interface on any given node will be distributed across parallel instances of the graph running on different cores/CPUs. Data submission is completely asynchronous.\n</p>\n<p>\nThis talk will provide a gentle introduction to the Pypes architecture and design.\n</p>\n<p>Outline:</p>\n<ul>\n<li>Brief intro to Stackless Python (benefits it provides)\n</li><li>Control-Flow vs Data-Flow\n</li><li>Preemptive vs Cooperative Scheduling\n</li><li>The Topological Scheduler\n</li><li>The REST API (Submitting Data - Asynchronous Web Service)\n</li><li>Packet API: A unified data model with meta-data support\n</li><li>Writing Custom Components - Paste templates and pluggable eggs\n</li><li>Scale up - multiprocessing support\n</li><li>Scale out - cloud friendly\n</li><li>Questions\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011LargeScaleDataConditioningProcessingWithStackl885.mp4", 
      "tags": [
        231, 
        489, 
        586, 
        211
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Large Scale Data Conditioning &amp; Processing with Stackless Python and Pypes", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T04:40:40+00:00", 
      "source_url": "http://blip.tv/file/4881214", 
      "video_ogv_length": "154817317", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011LargeScaleDataConditioningProcessingWithStackl255.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011LargeScaleDataConditioningProcessingWithStackl255.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011LargeScaleDataConditioningProcessingWithStackl439.png", 
      "slug": "pycon-2011--large-scale-data-conditioning--amp--p"
    }, 
    "model": "videos.Video", 
    "pk": 400
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        209
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Exhibition of Atrocity</p>\n<p>Presented by Mike Pirnat</p>\n<p>\nBelieve it or not, but you can write pretty horrendously awful code even in a language as elegant as Python. Over the years, I've committed my share of sins; now it's time to come clean. Step right up for a tour of twisted, evil, and downright wrong code, and learn some strategies to avoid writing criminally bad code--if you dare!\n</p>\n<p>Abstract</p>\n<p>\nWhat does it look like when good intentions go horribly wrong? This talk will take a tour through pathological code from my past (as well as some contributions from friends, coworkers, and the community), featuring such terrors as:\n</p>\n<ul>\n<li>Lies, Damn Lies, and Hungarian Notation\n</li><li>Crimes Against PEP-8\n</li><li>The Diaper Pattern\n</li><li>The Beast With a Thousand Elifs\n</li><li>The Mile-Long Club\n</li><li>God Objects and God Methods\n</li><li>The Malignant Menace of Mutable Keyword Arguments\n</li><li>The Seductive Lure of Global State\n</li><li>Slower Applications Through DTO Bondage\n</li><li>A Twisty Maze of Single-Character Variables, All Alike\n</li><li>Lambdas, Lambdas Everywhere\n</li><li>The List Comprehension That Ate Cincinnati\n</li><li>Adventures in Wheel Reinvention\n</li><li>New and Creative Ways to Break the Build\n</li></ul>\n<p>\n...as well as others as time permits.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011ExhibitionOfAtrocity139.mp4", 
      "tags": [
        587, 
        588, 
        589, 
        106, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Exhibition of Atrocity", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T04:21:58+00:00", 
      "source_url": "http://blip.tv/file/4881168", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011ExhibitionOfAtrocity635.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011ExhibitionOfAtrocity635.ogv\"\n  })\n</script>", 
      "video_ogv_length": "141638939", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011ExhibitionOfAtrocity736.png", 
      "slug": "pycon-2011--exhibition-of-atrocity"
    }, 
    "model": "videos.Video", 
    "pk": 401
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        190
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Handling ridiculous amounts of data with probabilistic data structures</p>\n<p>Presented by C. Titus Brown</p>\n<p>\nPart of my job as a scientist involves playing with rather large amounts of data (200 gb+). In doing so we stumbled across some neat CS techniques that scale well, and are easy to understand and trivial to implement. These techniques allow us to make some or many types of data analysis map-reducable. I'll talk about interesting implementation details, fun science, and neat computer science.\n</p>\n<p>Abstract</p>\n<p>\nIf an extreme talk, I will talk about interesting details/issues in:\n</p>\n<ol>\n<li>Python as the backbone for a non-SciPy scientific software package: using Python as a frontend to C++ code, esp for parallelization and testing purposes.\n\n</li><li>Implementing probabilistic data structures with one-sided error as pre-filters for data retrieval and analysis, in ways that are generally useful.\n\n</li><li>Efficiently breaking down certain types of sparse graph problems using these probabilistic data structures, so that large graphs can be analyzed straightforwardly. This will be applied to plagiarism detection and/or duplicate code detection.\n</li></ol>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011HandlingRidiculousAmountsOfDataWithProbabilisti358.mp4", 
      "title": "Handling ridiculous amounts of data with probabilistic data structures", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--handling-ridiculous-amounts-of-data-w", 
      "tags": [
        590, 
        591, 
        231, 
        489, 
        21
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T03:49:43+00:00", 
      "source_url": "http://blip.tv/file/4881076", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011HandlingRidiculousAmountsOfDataWithProbabilisti422.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011HandlingRidiculousAmountsOfDataWithProbabilisti422.ogv\"\n  })\n</script>", 
      "video_ogv_length": "125025053", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011HandlingRidiculousAmountsOfDataWithProbabilisti974.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 402
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        78
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Writing great documentation</p>\n<p>Presented by Jacob Kaplan-Moss</p>\n<p>\nDjango\u2019s among the best documented open source projects; I'm intensely proud of that accomplishment. If any part of Django endures, I hope it\u2019ll be a \u201cdocumentation culture\u201d \u2014 an ethos that values great, well-written documentation. To that end, this talk looks at the tools, tips, and techniques I\u2019ve learned over the years. I hope it helps you write great documentation, too.\n</p>\n<p>Abstract</p>\n<p>\nThis talk looks at tips, tools, and techniques you can use to produce great technical documentation.\n</p>\n<p>\nIt's split roughly into two parts:\n</p>\n<ul>\n<li>Part 1: technique. We'll look at the structural elements that make documentation useful: tutorials, high-level overviews, topical guides, reference material, FAQs, and more. We'll cover some tips on how to get documentation done, and community processes for handling documentation in teams (open or not). We'll also talk about what I'm calling \"Documentation Driven Development\" - a technique riffing off Test Driven Development that calls for writing documentation before code.\n\n</li><li>Part 2: tools. Over the last couple of years a few fantastic tools have sprung up that ease the technical aspects of writing documentation. We'll talk about which tools are suitable for which uses, and look at a handful of cool tools including <a href=\"http://sphinx.pocoo.org/\">Sphinx</a>, <a href=\"http://epydoc.sourceforge.net/\">Epydoc</a>, and <a href=\"http://fitzgen.github.com/pycco/\">http://fitzgen.github.com/pycco/</a>.\n</li></ul>\n<p>\nThis talk is mostly targeted towards those documenting libraries or frameworks intended for use by other developers, but much of it probably applies to any sort of technical documentation.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011WritingGreatDocumentation191.mp4", 
      "title": "Writing great documentation", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        592, 
        135, 
        74, 
        593, 
        594, 
        595, 
        231, 
        489, 
        366
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T03:47:59+00:00", 
      "source_url": "http://blip.tv/file/4881071", 
      "video_ogv_length": "158578172", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011WritingGreatDocumentation312.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011WritingGreatDocumentation312.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011WritingGreatDocumentation902.png", 
      "slug": "pycon-2011--writing-great-documentation"
    }, 
    "model": "videos.Video", 
    "pk": 403
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        210
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>mrjob: Distributed Computing for Everyone</p>\n<p>Presented by Jimmy Retzlaff</p>\n<p>\nHave tons of data that needs analysis? Now it's as easy as 1-2-3! 1) Sign up for an Amazon Web Services account. 2) Install Yelp's mrjob. 3) Write as few as a dozen lines of Python code. This talk will show you how to use mrjob and Amazon's Elastic MapReduce to easily process lots of data in parallel on a potentially large cluster of computers that you can rent for a dime per computer per hour.\n</p>\n<p>Abstract</p>\n<p>\nIn their 2004 paper, Google outlined MapReduce - one of the programming models they use to process large data sets. MapReduce is a relatively simple model to develop for that allows the underlying framework to automatically parallelize the job, add fault tolerance, and scale the job to many commodity computers.\n</p>\n<p>\nIn 2009, Amazon Web Services introduced their Elastic MapReduce (EMR) product. It layers the Hadoop open source package on top of their Elastic Compute Cloud (EC2) to allow anyone to rent a cluster of computers by the hour, starting at about a dime per computer per hour, in order to run MapReduce jobs.\n</p>\n<p>\nSome of the significant issues with Amazon's solution involve starting up machine instances, replicating your code and its dependancies to EMR, running and monitoring the job, and gathering the results.\n</p>\n<p>\nSo Yelp developed mrjob, which takes care of these details and lets the developer focus on working with their data. Yelp uses mrjob to power many internal jobs that work with its very large log files, for example:\n</p>\n<ul>\n<li>People Who Viewed This Also Viewed...\n</li><li>A user clicked an ad over and over, but we only want to charge the advertiser once\n</li><li>We're thinking of a change, but want to simulate how that will affect ad revenue\n</li></ul>\n<p>\nNow you can use that same power with just a few lines of Python.\n</p>\n<p>\nUseful links:\n</p>\n<ul>\n<li>Install mrjob: sudo easy_install mrjob\n</li><li>Documentation: <a href=\"http://packages.python.org/mrjob/\">http://packages.python.org/mrjob/</a>\n</li><li>PyPI: <a href=\"http://pypi.python.org/pypi/mrjob\">http://pypi.python.org/pypi/mrjob</a>\n</li><li>Development is hosted at github: <a href=\"http://github.com/Yelp/mrjob\">http://github.com/Yelp/mrjob</a>\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011MrjobDistributedComputingForEveryone780.mp4", 
      "title": "mrjob: Distributed Computing for Everyone", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        596, 
        597, 
        598, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T03:31:04+00:00", 
      "source_url": "http://blip.tv/file/4881016", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011MrjobDistributedComputingForEveryone272.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011MrjobDistributedComputingForEveryone272.ogv\"\n  })\n</script>", 
      "video_ogv_length": "142384088", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011MrjobDistributedComputingForEveryone940.png", 
      "slug": "pycon-2011--mrjob--distributed-computing-for-ever"
    }, 
    "model": "videos.Video", 
    "pk": 404
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        211
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Swarming the Web: Evolving the Perfect Config File</p>\n<p>Presented by Kurt Grandis</p>\n<p>\nDeployed web applications are typically run on top of stacks of highly configurable middleware. The number of tunable parameters and their impact are rarely fully explored. Using SciPy and a set of common Python-based web tools this session will present a new method of automatically tuning a typical LAMP stack for optimal performance.\n</p>\n<p>Abstract</p>\n<p>\nDeployed web applications typically run on top of stacks of configurable technology (e.g. web servers, interface modules, software load balancers, databases). Each of these components often has dozens of tuneable parameters. How many times are those values typically tweaked before a final set of tuned parameters are settled on? What criteria are typically used to determine the optimal set?\n</p>\n<p>\nThis session presents a new method of automatically tuning a common LAMP stack for optimal performance. We explore a solution using some common Python-based automated deployment and load testing tools and dive into scientific computing with SciPy.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011SwarmingTheWebEvolvingThePerfectConfigFile427.mp4", 
      "tags": [
        599, 
        231, 
        489, 
        198, 
        82, 
        543
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--swarming-the-web--evolving-the-perfec", 
      "title": "Swarming the Web: Evolving the Perfect Config File", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T03:29:19+00:00", 
      "source_url": "http://blip.tv/file/4881010", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011SwarmingTheWebEvolvingThePerfectConfigFile898.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011SwarmingTheWebEvolvingThePerfectConfigFile898.ogv\"\n  })\n</script>", 
      "video_ogv_length": "138952836", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011SwarmingTheWebEvolvingThePerfectConfigFile838.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 405
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        212
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>The Python That Wasn't</p>\n<p>Presented by Larry Hastings</p>\n<p>\nOne reason for Python's success is its restraint in adding new language features. Only the most essential changes make it--and for every change that gets accepted, many more are rejected. Come learn about proposed changes to the Python language that failed--what, how, and why.\n</p>\n<p>Abstract</p>\n<ul>\n<li>Quick overview of the process\n   <ul>\n<li>First ten years: send GvR a patch\n   </li><li>The modern approach: python-ideas, write a PEP, produce a reference implementation\n   </li></ul>\n</li><li>Discuss the \"prickly\" Python community\n   <ul>\n<li>This is a good thing! Only the best ideas survive the python-dev gauntlet!\n   </li><li>They do this not because they're mean, but because they care so much.\n   </li><li>We must have eternal vigilance to prevent unnecessary changes!\n   </li></ul>\n</li><li>A survey of some changes that didn't make it\n   <ul>\n<li>The switch/case statement (PEP 3103)\n   </li><li>The \"freeze protocol\" (PEP 351)\n   </li><li>The \"dynamic attribute access\" proposal from python-dev, 2007/02\n   </li><li>Many more possibilities await in the rejected PEPs!\n   </li></ul>\n</li><li>My message to the audience\n   <ul>\n<li>Start with a post to python-ideas, please!\n   </li><li>Don't be surprised if you get a negative reaction\n   </li><li>Don't let your fear of a negative reaction stop you from trying, necessarily\n   </li><li>Do your homework, and be your own worst critic\n   </li></ul>\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011ThePythonThatWasnt703.mp4", 
      "tags": [
        600, 
        18, 
        601, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "The Python That Wasn't", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T03:29:19+00:00", 
      "source_url": "http://blip.tv/file/4881006", 
      "video_ogv_length": "132000761", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011ThePythonThatWasnt838.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011ThePythonThatWasnt838.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011ThePythonThatWasnt367.png", 
      "slug": "pycon-2011--the-python-that-wasn--39-t"
    }, 
    "model": "videos.Video", 
    "pk": 406
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        213
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Continuous deployment</p>\n<p>Presented by Laurens Van Houtven</p>\n<p>\nThis talk is about continuous deployment practices and tools, lessons learned from implementing it, and putting them into perspective. The goal is to give other people tips and pointers for applying these ideas themselves.\n</p>\n<p>Abstract</p>\n<p>\nContinuous deployment is the practice of putting the latest revision of software into production use all the time, as opposed to working towards larger releases. The important difference is iteration time: whereas large software packages produce new software in timeframes of years or months, continuous deployment teams typically put new code into production in timeframes of hours or less.\n</p>\n<p>\nThe practice is slowly attracting a small but growing group of loyal followers, just like continuous integration over the past few years and test-driven development did before that. They can be explained in terms of being natural extensions of each other. Like TDD and CI, CD gets eyed somewhat suspiciously (and rightfully so: skeptical analysis is great), but the undersigned believes there's a legitimate advantage for many applications.\n</p>\n<p>\nMany years ago, TTD and testing tools in general were mostly ad-hockery. Now, with many different production-quality testing tools, this has become unthinkable. Similarly, continuous integration was something other people did for a long time, but now we have tools such as Buildbot and Hudson. Continuous deployment is still somewhat in the early stage in terms of ready-to-use tools, but it's likely that we'll see a similar evolution.\n</p>\n<p>\nHere's a rough outline of what I plan to cover:\n</p>\n<ul>\n<li>a short history of people developed software\n</li><li>from the recent models to CD (sort of a working definition of CD here)\n</li><li>when is it a good idea? pros/cons\n</li><li>requirements & battle plan for applying CD in an existing development environment (and possibly code base)\n</li><li>an overview of existing tools and how they work together\n</li><li>caveat emptors, known pitfalls (deployment and recovery strategies go here, since most implementations figure out they need them after stuff blows up)\n</li><li>questions! (hopefully lots of people who've tried or are thinking about implementing something similar -- like I said, there are a lot of people implementing it but not too many ideas being bounced around)\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011ContinuousDeployment913.mp4", 
      "tags": [
        602, 
        70, 
        603, 
        29, 
        231, 
        489, 
        604, 
        228, 
        605
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Continuous deployment", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T03:26:17+00:00", 
      "source_url": "http://blip.tv/file/4881000", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011ContinuousDeployment373.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011ContinuousDeployment373.ogv\"\n  })\n</script>", 
      "video_ogv_length": "134193408", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011ContinuousDeployment817.png", 
      "slug": "pycon-2011--continuous-deployment"
    }, 
    "model": "videos.Video", 
    "pk": 407
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        214
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Getting the job: the do's and don'ts of landing a Python job</p>\n<p>Presented by Brian Moloney</p>\n<p>\nEvery Python programmer is brilliant in his or her own way. That brilliance shines in code and peer-to-peer conversation. But how do you display your skills to a non-programmer? How do you impress management and human resources? What do you need to do (and not do) to successfully navigate the hiring process and land the job?\n</p>\n<p>Abstract</p>\n<p>\nImaginary Landscape has been interviewing, hiring and not hiring Python talent since 1999. Throughout these many years, there have been good candidates, bad candidates and downright ugly candidates. This talk will use actual correspondence and examples to demonstrate what can separate you from the crowd and what can separate you from consideration. Imaginary Landscape non-technical Managing Partner Brian Moloney will lead the session by describing how he evaluates potential hires and what goes through his mind while speaking with potential Python candidates. Attendees will take away a specific set of guidelines for mastering the non-technical aspects of the recruiting process.\n</p>\n<p>\n[VIDEO HAS ISSUES: There are problems with the audio for the first 5 minutes.]\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011GettingTheJobTheDosAndDontsOfLandingAPython956.mp4", 
      "title": "Getting the job: the do's and don&#39;ts of landing a Python job", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--getting-the-job--the-do--39-s-and-don", 
      "tags": [
        606, 
        607, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T03:24:49+00:00", 
      "source_url": "http://blip.tv/file/4880996", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011GettingTheJobTheDosAndDontsOfLandingAPython128.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011GettingTheJobTheDosAndDontsOfLandingAPython128.ogv\"\n  })\n</script>", 
      "video_ogv_length": "163142762", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011GettingTheJobTheDosAndDontsOfLandingAPython220.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 408
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Packaging, from Distutils to Distutils2</p>\n<p>Tarek Ziad\u00e9</p>\n<p>\nPackaging or installing a Python application can be extremely painful. This talk will deep-dive into the new Distutils2 features and explain how you can use them in your project *today* to make life easier for everyone (users, OS package managers, developers, etc.).\n</p>\n<p>Abstract</p>\n<ol>\n<li>Distutils2 presentation and goals\n   <ol>\n<li>Framework\n   </li><li>Command-driven packaging system\n</li><li>Changes from Distutils1\n   <ol>\n<li>R.I.P. setup.py\n   </li><li>The new metadata fields (PEP 345)\n   </li><li>versions for your project (PEP 386)\n   </li><li>PyPI goodies\n      <ol>\n<li>browsing\n      </li><li>uploading docs\n      </li></ol>\n</li><li>What's installed ? what to install ? (PEP 376)\n      <ol>\n<li>The Dependency graph tool\n      </li></ol>\n</li><li>Extensibility !\n      <ol>\n<li>commands\n      </li><li>compilers\n      </li></ol>\n</li></ol>\n</li><li>Pysetup, one command to rule them all\n   <ol>\n<li>install !\n   </li><li>remove\n   </li><li>do other things\n   </li></ol>\n</li><li>Examples\n   <ol>\n<li>Example 1: A simple Distutils2 project\n   </li><li>Example 2: Porting your project to Distutils2, and keep it working in Distutils/Setuptools/zc.buildout environments.\n   </li><li>Example 3: Creating and releasing your own commands and compilers\n   </li><li>Example 4: Developement process made simple with Distutils2\n   </li></ol>\n</li><li>Conclusion\n   <ol>\n<li>Roadmap\n   </li></ol>\n</li></ol></li></ol>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PackagingFromDistutilsToDistutils2191.mp4", 
      "title": "Packaging, from Distutils to Distutils2", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        396, 
        608, 
        231, 
        489, 
        609, 
        399, 
        250
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T03:24:02+00:00", 
      "source_url": "http://blip.tv/file/4880990", 
      "video_ogv_length": "173744629", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PackagingFromDistutilsToDistutils2293.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PackagingFromDistutilsToDistutils2293.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PackagingFromDistutilsToDistutils2901.png", 
      "slug": "pycon-2011--packaging--from-distutils-to-distutil"
    }, 
    "model": "videos.Video", 
    "pk": 409
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Ten Years of Twisted</p>\n<p>Glyph Lefkowitz</p>\n<p>\nThe Twisted event-driven networking engine is well-known in the Python community. However, only a few of its features are widely understood. This talk will be a brief conceptual introduction to Twisted, followed by a survey of its features, their status, and how development has been proceeding over the years, with a special focus on the last two years of sponsored development.\n</p>\n<p>Abstract</p>\n<p>\nThis talk will begin with a brief introduction to Twisted architectural concepts; a description of the event loop, connections, and timers. It will then segue into the many different features that Twisted offers, including command-line tools for running an out-of-the-box zero-configuration HTTP server, DNS server, IRC server, and SMTP server. This will also present the relative maturity and stability of each of these areas of the code, with a special emphasis on what level of expertise a developer should have before attempting to use them. Finally, I will describe some of the features that have been added to Twisted along the way, including some new and exciting developments that have been happening recently.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011TenYearsOfTwisted807.mp4", 
      "title": "Ten Years of Twisted", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        231, 
        489, 
        195
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T03:05:10+00:00", 
      "source_url": "http://blip.tv/file/4880941", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011TenYearsOfTwisted482.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011TenYearsOfTwisted482.ogv\"\n  })\n</script>", 
      "video_ogv_length": "131824079", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011TenYearsOfTwisted381.png", 
      "slug": "pycon-2011--ten-years-of-twisted"
    }, 
    "model": "videos.Video", 
    "pk": 410
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        215
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>\nSince 2.5, the API has become more pythonic and self-descriptive. Blender's UI can show you the Python equivalent for nearly every user action and includes a full datablock exploration tool. Users will be taught how to use so they can quickly adapt to their appropriate needs with a little Blender experience and no previous BPY experience.\n</p>\n<p>\nThere will be a brief Blender overview, an introduction to the API and how to use it, as well as / along with an overview of some of the presenter's own tools / use cases. Some other popular 3rd party Python tools will also be shown as an example.\n</p>\n<p>\nIf there is time, a brief demo of the Blender Game Engine will also be given, though that is a separate API.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011UsingBlendersNewBPYPythonAPI687.mp4", 
      "tags": [
        610, 
        611, 
        310, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Using Blender's new BPY Python API", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T03:04:34+00:00", 
      "source_url": "http://blip.tv/file/4880934", 
      "video_ogv_length": "150937361", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011UsingBlendersNewBPYPythonAPI725.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011UsingBlendersNewBPYPythonAPI725.ogv\"\n  })\n</script>", 
      "summary": "<p>Blender 2.5 (a free and open source software 3d graphics suite) includes a new BPY python API which is usable for scripting modeling, animation, etc. Learn to use this API to speed up your workflow, create procedural graphics, and cool new tools.</p>", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011UsingBlendersNewBPYPythonAPI450.png", 
      "slug": "pycon-2011--using-blender--39-s-new-bpy-python-ap"
    }, 
    "model": "videos.Video", 
    "pk": 411
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        216
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>TUF: Secure Software Updates in Python</p>\n<p>Presented by Geremy Condra</p>\n<p>\nFrom an attacker's point of view there are few entry points with as much to offer as a vulnerable software updater, yet history tells us that such vulnerabilities are common. In this talk we'll demonstrate a number of attacks, explain how common approaches fail to defend against them, and demonstrate a pure Python library (TUF) that provides both robust protection and extreme ease of use.\n</p>\n<p>Abstract</p>\n<p>\nVulnerabilities in software update systems expose users to huge range of potential security risks, including:\n</p>\n<ul>\n<li>Freeze attacks,\n</li><li>Mix-and-match attacks,\n</li><li>Rollback attacks, and\n</li><li>Endless data attacks\n</li></ul>\n<p>\nIn the first part of this talk, we'll demonstrate each of these against real-world software updaters and explain how commonly used countermeasures fail in application. We'll then move on to the second part of the talk, demonstrating TUF, its internals, and the mechanisms it uses to additionally defend against key compromise. Finally, we'll demonstrate how easy it is to integrate TUF into your application and its lifecycle.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011TUFSecureSoftwareUpdatesInPython643.mp4", 
      "tags": [
        231, 
        489, 
        83, 
        612, 
        613
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--tuf--secure-software-updates-in-pytho", 
      "title": "TUF: Secure Software Updates in Python", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T02:16:22+00:00", 
      "source_url": "http://blip.tv/file/4880802", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011TUFSecureSoftwareUpdatesInPython394.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011TUFSecureSoftwareUpdatesInPython394.ogv\"\n  })\n</script>", 
      "video_ogv_length": "147096471", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011TUFSecureSoftwareUpdatesInPython643-944.jpg", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 412
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        217
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Python and Robots: Teaching Programming in High School</p>\n<p>Presented by Vern Ceder</p>\n<p>\nCombining Python with inexpensive robots is a very effective way of teaching programming at the middle and high school levels. Since Python is easy to understand a constructivist approach is possible - students learn by creating and running simple programs, observing the results, and then modifying their code to fix bugs and add functionality.\n</p>\n<p>Abstract</p>\n<p>\nThe approach suggested in this talk is partly based upon that developed at the Institute for Personal Robots in Education (<a href=\"http://wiki.roboteducation.org/\">http://wiki.roboteducation.org</a>) by staff from Georgia Tech and Bryn Mawr, combined with my own experiences teaching programming with Python as described in my talk \"Goodbye, Hello World: Rethinking Teaching with Python\", PyCon 2007, and my subsequent talks at NECC.\n</p>\n<p>\nBecause students are able to see what their code is doing and because Python is easy to understand, students can explore simple programming concepts, learning features as they need them. This approach increases both student engagement and retention. It also seems that this approach is more appealing to girls than a more traditional programming class.\n</p>\n<p>\nI'll illustrate my talk with samples of code created by students and video of the students/robots in action.\n</p>\n<p>\nOutline\n</p>\n<p>\nIntroduction - school background, course structure, origin of approach\n</p>\n<p>\nHardware and computer setup used\n</p>\n<p>\nInitial exercises and first projects\n</p>\n<ul>\n<li>Control of robot\n</li><li>Program as sequence of commands\n</li><li>Basic programming concepts - looping, branching, functions\n\n<p>\nAdvanced projects\n</p>\n<ul>\n<li>obstacle detection\n</li><li>image processing\n</li><li>simple AI approaches\n</li></ul>\n<p>\nPitfalls and strategies for using robots\n</p>\n<p>\nQuestions and Suggestions\n</p></li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonAndRobotsTeachingProgrammingInHighSchool957.mp4", 
      "tags": [
        614, 
        231, 
        489, 
        615, 
        288
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Python and Robots: Teaching Programming in High School", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T02:13:16+00:00", 
      "source_url": "http://blip.tv/file/4880794", 
      "video_ogv_length": "258289243", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonAndRobotsTeachingProgrammingInHighSchool795.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PythonAndRobotsTeachingProgrammingInHighSchool795.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PythonAndRobotsTeachingProgrammingInHighSchool378.png", 
      "slug": "pycon-2011--python-and-robots--teaching-programmi"
    }, 
    "model": "videos.Video", 
    "pk": 413
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        218
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Rapid Python used on Big Data to Discover Human Genetic Variation</p>\n<p>Presented by Deniz Kural</p>\n<p>\nAdvances in genome sequencing has enabled large-scale projects such as the 1000 Genomes Project to sequence genomes across diverse populations around the world, resulting in very large data sets. I use Python for rapid development of algorithms for processing & analyzing genomes and discovering thousands of new variants, including \"Mobile Elements\" that copy&paste; themselves across the genome.\n</p>\n<p>Abstract</p>\n<p>\nRecent advances in high-throughput sequencing now enables accurate sequencing human genomes at a low cost & high speed. This technology is now used to initiate projects involving large-scale sequencing of many genomes. The 1000 Genomes project aims to sequence 2500 genomes across 27 world populations, and has initially completed its Pilot phase. The aim of the project is to discover & characterize novel variants. These variants enable association studies that investigate the link between genomic variation & phenotypes, including disease.\n</p>\n<p>\nA class of variants, known as \"Structural Variants\" represent a heterogenous class of larger variants, such as inversions, duplications, deletions, and various kinds of insertions.\n</p>\n<p>\nI use Python to for rapid development of algorithms to process, analyze, and annotate very large data sets. In particular, I focus on Mobile Elements, pieces of DNA that copy&paste; across the genome. These elements constitute roughly half of the genome, whereas protein-coding genes account for roughly 1.5 % of the genome.\n</p>\n<p>\nI will discuss distributed computing, genomics, and big data within the context of Python.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011RapidPythonUsedOnBigDataToDiscoverHumanGenet196.mp4", 
      "tags": [
        590, 
        56, 
        616, 
        617, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Rapid Python used on Big Data to Discover Human Genetic Variation", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T01:48:43+00:00", 
      "source_url": "http://blip.tv/file/4880720", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011RapidPythonUsedOnBigDataToDiscoverHumanGenet265.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011RapidPythonUsedOnBigDataToDiscoverHumanGenet265.ogv\"\n  })\n</script>", 
      "video_ogv_length": "110103548", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011RapidPythonUsedOnBigDataToDiscoverHumanGenet382.png", 
      "slug": "pycon-2011--rapid-python-used-on-big-data-to-disc"
    }, 
    "model": "videos.Video", 
    "pk": 414
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        97
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Get new contributors (and diversity) through outreach</p>\n<p>Presented by Asheesh Laroia</p>\n<p>\nGroups like the Fedora Design Team, Dreamwidth, SF Ruby, and OpenHatch have discovered the power of outreach to bring in new contributors. In the past year, SF Ruby grew in numbers as well as in diversity, moving from 3% women to 18% women. Because most projects need ongoing help, this talk discusses effective strategies for bringing in contributors who stick around for the long haul.\n</p>\n<p>Abstract</p>\n<p>\nThis talk is targeted at anyone involved in an open source project who wants to find more contributors.\n</p>\n<p>\nPrograms like Google Summer of Code often provide excited students who disappear after a summer's work. Meanwhile, request for help emails on development lists are typically met with silence. Hackathons create a flurry of commits, but then we never hear from the participants again. Expanding your team is possible, and it requires care in terms of outreach, expectation management, and mentorship.\n</p>\n\nWe will discuss three major forms of outreach:\n\n<ul>\n<li>One-on-one check-ins with participants,\n</li><li>Periodic drives to bring in new contributors, and\n</li><li>In-person teaching events.\n</li></ul>\n\nEach one has \"do\"s and \"don't\"s associated with it. This talk digests the experience of effective outreach into practical strategies that you can re-use within your project.\n", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011GetNewContributorsAndDiversityThroughOutreach888.mp4", 
      "title": "Get new contributors (and diversity) through outreach", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--get-new-contributors--and-diversity--", 
      "tags": [
        551, 
        618, 
        619, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T01:46:33+00:00", 
      "source_url": "http://blip.tv/file/4880711", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011GetNewContributorsAndDiversityThroughOutreach982.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011GetNewContributorsAndDiversityThroughOutreach982.ogv\"\n  })\n</script>", 
      "video_ogv_length": "162104223", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011GetNewContributorsAndDiversityThroughOutreach225.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 415
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        219
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>An Introduction to Tornado</p>\n<p>Presented by Gavin M. Roy</p>\n<p>\nTornado is an open source version of the scalable, non-blocking web server and tools that power FriendFeed. It is not only a web server but it is a light-weight, use only what you need, web development framework. In this talk we will review the current state of the Tornado project, review the features Tornado provides and give examples of how to implement asynchronous web applications in Tornado.\n</p>\n<p>Abstract</p>\n<p>\nTornado is an open source version of the scalable, non-blocking web server and tools that power FriendFeed. It is not only a web server but it is a light-weight, use only what you need, web development framework. In this talk we will review the current state of the Tornado project, review the features Tornado provides and give examples of how to implement asynchronous web applications in Tornado.\n</p>\n<p>\nTopics covered will include:\n</p>\n<ul>\n<li>Core Tornado concepts\n</li><li>Building an asynchronous web application\n</li><li>Using the Tornado template engine\n</li><li>Database Interaction\n</li><li>Secure cookies and Sessions\n</li><li>Utilizing built-in OAuth Clients for Authentication\n</li><li>Websockets\n</li><li>State of asynchronous drivers available to Tornado\n</li><li>A light introduction to Tornado internals\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011AnIntroductionToTornado437.mp4", 
      "title": "An Introduction to Tornado", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        231, 
        489, 
        357
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-14T01:43:18+00:00", 
      "source_url": "http://blip.tv/file/4880705", 
      "video_ogv_length": "227050290", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011AnIntroductionToTornado850.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011AnIntroductionToTornado850.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011AnIntroductionToTornado238.png", 
      "slug": "pycon-2011--an-introduction-to-tornado"
    }, 
    "model": "videos.Video", 
    "pk": 416
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        220
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Statistical machine learning for text classification with scikit-learn</p>\n<p>Presented by Olivier Grisel</p>\n<p>\nThe goal of this talk is to give a state-of-the-art overview of machine learning algorithms applied to text classification tasks ranging from language and topic detection in tweets and web pages to sentiment analysis in consumer products reviews.\n</p>\n<p>Abstract</p>\n<p>\nUnstructured or semi-structured text data is ubiquitous thanks to the read-write nature of the web. However human authors are often lazy and don't fill-in structured metadata forms in web applications. It is however possible to automate some structured knowledge extraction with simple and scalable statistical learning tools implemented in python. For instance:\n</p>\n<ul>\n<li>guessing the language and topic of tweets and web pages\n</li><li>analyze the sentiment (positive or negative) in consumer products reviews in blogs or customer emails\n</li></ul>\n<p>\nThis talk will introduce the main operational steps of supervised learning:\n</p>\n<ul>\n<li>extracting the relevant features from text documents\n</li><li>selecting the right machine learning algorithm to train a model for the task at hand\n</li><li>using the trained model on previously unseen documents\n</li><li>evaluating the predictive accuracy of the trained model\n</li></ul>\n<p>\nWe will also demonstrate the results obtained for above tasks using the <a href=\"http://scikit-learn.sourceforge.net/\">scikit-learn</a> package and compare it to other implementations such as <a href=\"http://nltk.org/\">nltk</a> and the <a href=\"http://code.google.com/apis/predict/\">Google Prediction API</a>.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011StatisticalMachineLearningForTextClassification772.mp4", 
      "title": "Statistical machine learning for text classification with scikit-learn", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        620, 
        621, 
        456, 
        231, 
        489, 
        622
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T23:37:31+00:00", 
      "source_url": "http://blip.tv/file/4880389", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011StatisticalMachineLearningForTextClassification483.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011StatisticalMachineLearningForTextClassification868.ogv\"\n  })\n</script>", 
      "video_ogv_length": "168176911", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011StatisticalMachineLearningForTextClassification447.png", 
      "slug": "pycon-2011--statistical-machine-learning-for-text"
    }, 
    "model": "videos.Video", 
    "pk": 417
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        221, 
        326
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Disqus: Serving 400 million people with Python</p>\n<p>Presented by David Cramer and Jason Yan</p>\n<p>\nDisqus, one of the largest Python applications on the web, will explain how they deal with scaling complexities in a growing startup. Founded in 2007, Disqus maintains a small engineering team reaching over 400 million users a month. Being powered by Python has allowed quick iteration of the application, without sacrificing code quality and performance. The talk will cover key parts of the architecture and development process at Disqus, including hardware, databases, and common bottlenecks.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011DisqusServing400MillionPeopleWithPython178.mp4", 
      "tags": [
        56, 
        623, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--disqus--serving-400-million-people-wi", 
      "title": "Disqus: Serving 400 million people with Python", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T23:18:43+00:00", 
      "source_url": "http://blip.tv/file/4880330", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011DisqusServing400MillionPeopleWithPython302.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011DisqusServing400MillionPeopleWithPython135.ogv\"\n  })\n</script>", 
      "video_ogv_length": "93461740", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011DisqusServing400MillionPeopleWithPython212.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 418
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        222
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>What would you do with an ast?</p>\n<p>Presented by Matthew J Desmarais</p>\n<p>\nThe ast module in the Python (>= 2.6) standard library provides a representation of python code in a python data structure. We'll begin with a discussion about what an abstract syntax tree is and why it's useful. We can then talk about what's available in the ast module, how it works, and how you can use it. This will be a practical session built around examples examining and modifying live ASTs.\n</p>\n<p>Abstract</p>\n<p>\nI would prefer to make this a 45 minute talk with examination of code samples.\n</p>\n<p>\nPython 2.6 introduced a new module in the standard library, ast. The first line of the ast documentation is, \"The ast module helps Python applications to process trees of the Python abstract syntax grammar.\" What this means is not obvious and many, if not most, python programmers won't know what this means. I will begin by talking about the idea of syntax tree and how it fits into the python execution lifecycle. I will also talk about the contents of the ast module. I will cover the available ast.Node subclasses and the provided helper functions, including the NodeVisitor and NodeTransformer. I will finish by talking about how the ast module can be used to analyze Python code and how it can be used to generate new code.\n</p>\n<p>\nI expect the time to break down roughly like this:\n</p>\n<p>\nIntroduction ( 5m )\n</p>\n<ul>\n<li>Capacitor joke\n</li><li>What is an abstract syntax tree?\n</li><li>How they are used by the Python interpreter\n</li></ul>\n<p>\nThe contents of the ast module (20 m)\n</p>\n<ul>\n<li>The node subclasses and the ast ( 10m )\n   <ul>\n<li>How you get an ast.\n      <ul><li>code examples</li></ul>\n</li><li>ast.stmt vs. ast.expr\n   </li><li>peculiarities\n      <ul>\n<li>code examples\n         <ul>\n<li>elif as syntactic sugar for \"if: else: if:\"\n         </li><li>comparison operators\n         </li></ul>\n</li></ul>\n</li><li>Why this is useful.\n      <ul>\n<li>the ast is the \"truth\" of the program\n         <ul>\n<li>code examples\n         </li><li>tricky code\n         </li></ul>\n</li></ul>\n</li></ul>\n</li><li>The ast module helpers ( 10m )\n   <ul>\n<li>visitor pattern\n   </li><li>NodeVisitor\n   </li><li>NodeTransformer\n   </li><li>code examples\n   </li></ul>\n</li></ul>\n<p>\nWhat you do with an ast ( 15m )\n</p>\n<ul>\n<li>Walking an ast\n   <ul>\n<li>code examples\n      <ul><li>a simple visitor to gather variables by scope</li></ul>\n</li></ul>\n</li><li>Creating/Modifying an ast\n   <ul>\n<li>code examples\n      <ul>\n<li>rearrange imports transformer\n      </li><li>naive \"rename all instances\" transformer\n      </li><li>naive macro expansion transformer\n      </li></ul>\n</li></ul>\n</li></ul>\n<p>\nConclusion ( 5m )\n</p>\n<ul>\n<li>Practical Applications\n   <ul>\n<li>existing projects\n      <ul>\n<li>visitors\n         <ul><li>checkers (pylint, pyflakes)</li></ul>\n</li><li>transformers\n         <ul><li>refactoring tools (rope)</li></ul>\n</li></ul>\n</li></ul>\n</li><li>When is it a good idea to use ast?\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011WhatWouldYouDoWithAnAst545.mp4", 
      "tags": [
        624, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "What would you do with an ast?", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T23:01:57+00:00", 
      "source_url": "http://blip.tv/file/4880291", 
      "video_ogv_length": "220279145", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011WhatWouldYouDoWithAnAst704.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011WhatWouldYouDoWithAnAst704.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011WhatWouldYouDoWithAnAst198.png", 
      "slug": "pycon-2011--what-would-you-do-with-an-ast"
    }, 
    "model": "videos.Video", 
    "pk": 419
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        28
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>The Data Structures of Python</p>\n<p>Presented by Alex Gaynor</p>\n<p>\nAny Python programmer knows about the major builtin data strcutres, lists, dicts, tuples, but do you always remember when you're supposed to use them? Do you know about all the cool data structures hidden in the standard library? This talk will be a review of the characteristics of the different data structures, and a tour of idiomatic ways to use some of the structures in the standard library.\n</p>\n<p>Abstract</p>\n<p>\nFirst, as a note this talk borders between survey and discuss in depth. For each data structure I want to cover their implementation, performance characteristics, and idiomatic usage (e.g. tuples vs. lists), a lot of them have similar implementations so idiomatic usage will dominate for some of them.\n</p>\n<ul>\n<li>The builtins (10 minutes)\n   <ul>\n<li>lists\n      <ul>\n<li>Ordered collections of any type of objects\n      </li><li>Mutable\n      </li><li>Implemented as an array of pointers\n      </li></ul>\n</li><li>tuples\n      <ul>\n<li>Ordered collections of any type of objects\n      </li><li>Immutable*\n      </li><li>Implemented as a fixed-length array of pointers\n      </li></ul>\n</li><li>dicts\n      <ul>\n<li>Unordered mapping of hashable objects to any objects\n      </li><li>Mutable\n         <ul><li>Why no immutable variant</li></ul>\n</li><li>Implemented as an open-addressed hash table.\n      </li></ul>\n</li><li>sets\n      <ul>\n<li>Unordered collection of hashable objects\n      </li><li>Mutable\n      <ul><li>frozenset</li></ul>\n</li><li>Implemented as an open-addressed hash table.\n      </li></ul>\n</li></ul>\n</li><li>The Standard Library (10 minutes)\n   <ul>\n<li>OrderedDict\n      <ul>\n<li>Ordered mapping of hashable objects to any objects\n      </li><li>Mutable\n      </li><li>Implemented as a dict with a doubly-linked list running through it.\n      </li></ul>\n</li><li>deque\n      <ul>\n<li>Ordered collection of any type of objects\n      </li><li>Mutable\n      </li><li>Implemented as an unrolled, doubly-linked list\n      </li></ul>\n</li><li>namedtuple\n      <ul>\n<li>Ordered collection of any type of objects, *also* addressable by name.\n      </li><li>Immutable\n      </li><li>Implemented as a tuple with extra properties\n      </li></ul>\n</li><li>array\n      <ul>\n<li>Like a list... but limited to \"primitve\" types.\n      </li></ul>\n</li></ul>\n</li><li>Performance characteristics.\n</li><li>Writing your own (5 minutes)\n   <ul>\n<li>Abstract Base Classes\n      <ul>\n<li>Duck typing\n         <ul><li>Why would you want to use them!</li></ul>\n</li><li>What's available.\n      </li></ul>\n</li><li>OrderedSet\n      <ul>\n<li>An ordered collection of hashable objects\n      </li><li>Mutable\n      </li><li>Implemented as a set with a doubly-linked list running through it.\n      </li></ul>\n</li></ul>\n</li><li>Questions (5 minutes)\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011TheDataStructuresOfPython276.mp4", 
      "tags": [
        625, 
        626, 
        627, 
        385, 
        628, 
        629, 
        630, 
        631, 
        632, 
        633, 
        231, 
        489, 
        634, 
        635
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "The Data Structures of Python", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T22:27:10+00:00", 
      "source_url": "http://blip.tv/file/4880187", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011TheDataStructuresOfPython678.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011TheDataStructuresOfPython678.ogv\"\n  })\n</script>", 
      "video_ogv_length": "161075055", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011TheDataStructuresOfPython246.png", 
      "slug": "pycon-2011--the-data-structures-of-python"
    }, 
    "model": "videos.Video", 
    "pk": 420
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        78, 
        166, 
        104, 
        223, 
        224
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Panel: Python VMs</p>\n<p>Presented by Jacob Kaplan-Moss, Brett Cannon, Maciej Fijalkowski, Frank Wierzbicki, Dino Viehland</p>\n<p>\nPython is lucky enough to have a healthy ecosystem of virtual machines (VMs) exist. CPython, Jython, IronPython, and PyPy are all used extensively by people in real-world situations. This panel brings together a representative from each of the major VMs to discuss where they are now, going in the future, and to answer questions from the community.\n</p>\n<p>Abstract</p>\n<p>\nAll four major Python VMs will be represented:\n</p>\n<ul>\n<li><a href=\"http://python.org/\">CPython</a>: Brett Cannon\n</li><li><a href=\"http://www.jython.org/\">Jython</a>: Frank Wierzbicki\n</li><li><a href=\"http://ironpython.net/\">IronPython</a>: Dino Viehland\n</li><li><a href=\"http://pypy.org/\">PyPy</a>: Maciej Fijalkowski\n</li></ul>\n\nModeration will be handled by Jacob Kaplan-Moss of Django.\n", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PanelPythonVMs318.mp4", 
      "title": "Panel: Python VMs", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--panel--python-vms", 
      "tags": [
        18, 
        300, 
        9, 
        231, 
        489, 
        91
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T21:43:48+00:00", 
      "source_url": "http://blip.tv/file/4880068", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PanelPythonVMs384.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PanelPythonVMs384.ogv\"\n  })\n</script>", 
      "video_ogv_length": "226875501", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PanelPythonVMs871.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 421
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        225
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Units Need Testing Too</p>\n<p>Presented by Gary Bernhardt</p>\n<p>\nPython's long history of testing has focused primarily on integration- and system-level tests: slow-running tests executing lots of code. These are a great start, but many of them can be transformed into unit-level tests. True unit tests are orders of magnitude faster (about 1ms each), providing quicker feedback and better failure localization. We'll look at why and how to write them.\n</p>\n<p>Abstract</p>\n<p>\nPython has a wonderful legacy in testing: PyUnit has been in the standard library since March, 2001, and it was already a year old by then. We adopted browser driving quickly, and we do it at huge scale with great test parallelization infrastructure.\n</p>\n<p>\nBig tests aren't everything, though. In the Python world, true unit tests are somewhat rare, and even most tests written with the unittest library are integration tests. These tests are slow to execute and don't localize failure as well as smaller, focused tests. They leave us with two options: either run them rarely, sacrificing feedback, or run them often, sacrificing speed.\n</p>\n<p>\nWriting true unit tests removes that particular trade-off. When your tests execute in a millisecond each, you can afford to run a thousand of them every time you save a source file. This talk will discuss what unit tests really are, why they matter, and how to write them in Python.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011UnitsNeedTestingToo472.mp4", 
      "title": "Units Need Testing Too", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        231, 
        489, 
        324, 
        21, 
        636
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T21:22:08+00:00", 
      "source_url": "http://blip.tv/file/4879997", 
      "video_ogv_length": "176895138", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011UnitsNeedTestingToo845.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011UnitsNeedTestingToo845.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011UnitsNeedTestingToo863.png", 
      "slug": "pycon-2011--units-need-testing-too"
    }, 
    "model": "videos.Video", 
    "pk": 422
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        216
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Through the Side Channel: Timing and Implementation Attacks in Python</p>\n<p>Presented by Geremy Condra</p>\n<p>\nPython's dynamic nature, large standard library, and concern for beauty over performance make it an elegant and uniquely easy to use language, but they also cause some unique problems. In this talk we'll explore how features ranging from dictionaries to duck typing can become security risks, demonstrate those attacks on real Python projects, and examine how you can protect yourself and your code.\n</p>\n<p>Abstract</p>\n<p>\nOver the last decade, an increasing body of evidence has accumulated indicating that even when a system is hardened enough to provide strong guarantees about its high-level behavior, implementation details and especially performance properties can still provide attackers with an easy way in. For Python, this is especially problematic: its generally high-level view and the emphasis placed on flexibility often mean that it can be difficult to stop attackers from gaining a foothold, while its comparatively low execution speed increases the efficacy of wide variety of implementation and timing attacks.\n</p>\n<p>\nTo help Pythonistas understand and cope with these problems, we've divided this talk into two parts: in the first, we demonstrate the attacks against a series of widely-deployed Python projects with the goal of both improving awareness about the issue and demonstrating common weaknesses to be avoided. The second demonstrates effective countermeasures and alternative constructions with the goal of improving defenders' odds of spotting and correcting these flaws in their own code.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011ThroughTheSideChannelTimingAndImplementationAt369.mp4", 
      "title": "Through the Side Channel: Timing and Implementation Attacks in Python", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        637, 
        638, 
        231, 
        489, 
        83
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T21:15:04+00:00", 
      "source_url": "http://blip.tv/file/4879979", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011ThroughTheSideChannelTimingAndImplementationAt717.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011ThroughTheSideChannelTimingAndImplementationAt717.ogv\"\n  })\n</script>", 
      "video_ogv_length": "159382259", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011ThroughTheSideChannelTimingAndImplementationAt601.png", 
      "slug": "pycon-2011--through-the-side-channel--timing-and-"
    }, 
    "model": "videos.Video", 
    "pk": 423
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        225
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Backup Is Hard; Let's Go Shopping</p>\n<p>Presented by Gary Bernhardt</p>\n<p>\nWe'll fly through the most clever bits of BitBacker, an online backup app developed as a startup for three years and eventually abandoned. Highlights: a hacked-up httplib/asyncore HTTP client; a real-life, HATEOAS-respecting RESTful API, and an encryption scheme that can quickly diff a file system against the server while leaking no information \u2013 not even file timestamps.\n</p>\n<p>Abstract</p>\n<p>\nThis is the story of a solution to a huge problem: fast, secure online backup. A single client generates a hundred gigabytes, millions of data chunks, and thousands of file system snapshots. To appreciate the problem's scale, consider that a Python array holding content hashes for 1,000,000 files consumes 100 MB of memory. File hashes are only a portion of the required per-file metadata, and that's only one for snapshot of thousands.\n</p>\n<p>\nWe'll tour the hard parts of this system with no apology for their difficulty. The httplib/asyncore hybrid monster that served millions of parallel requests, transparently retrying on failures and timeouts, with only 300 lines of python. The RESTful API \u2013 fully respecting hypertext, with every request safely repeatable, even POSTs, and not a single hard-coded URL in the client. The encryption scheme that leaked nothing \u2013 not even modification times \u2013 but could quickly diff local file systems against the server. And, that one time that a client accidentally requested a 4.76 megabyte URL in production.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011BackupIsHardLetsGoShopping100.mp4", 
      "tags": [
        639, 
        590, 
        640, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--backup-is-hard--let--39-s-go-shopping", 
      "title": "Backup Is Hard; Let's Go Shopping", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T20:39:44+00:00", 
      "source_url": "http://blip.tv/file/4879866", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011BackupIsHardLetsGoShopping875.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011BackupIsHardLetsGoShopping257.ogv\"\n  })\n</script>", 
      "video_ogv_length": "169795828", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011BackupIsHardLetsGoShopping206.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 424
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        226
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>How to kill a patent with Python\n</p><p>Presented by Van Lindberg</p>\n<p>\nFinding the right piece of \"prior art\" - technical documentation that described a patented piece of technology before the patent was filed - is like finding a needle in a very big haystack. This session will talk about how I am making that process faster and more accurate through the use of natural language processing, graph theory, machine learning, and lots of Python.\n</p>\n<p>Abstract</p>\n<p>\nFrom my work consulting on a number of patent cases, I am frequently asked to find \"prior art\" - patents and publications that describe a technology before a certain date. The problem is that the indexing mechanisms for patents and publications are not as good as they could be, making good prior art searching more of an art than a science. When I decided to do better, I reached for Python. \n</p>\n<ul>\n<li>Part I (5 mins): The USPTO as a data source.*\n The full-text of each patent is available from the USPTO (and now from Google.) What does this data look like? How can it be harvested and normalized to create data structures that we can work with?\n</li>\n<li>Part II (15 mins, in two parts):* \n Once the patents have been cleaned and normalized, they can be turned into data structures that we can use to evaluate their relationship to other documents. This is done in two ways - by modeling each patent as a document vector and a graph node. \n</li>\n<li>Part IIA (7 mins): Patents as document vectors.* \n Once we have a patent as a data structure, we can treat the patent as a vector in an n-dimensional space. In moving from a document into a vector space, we will touch on normalization, stemming, TF/IDF, Latent Semantic Indexing (LSI) and Latent Dirichlet Allocation (LDA). \n</li>\n<li>Part IIB (7 mins): Patents as technology graphs.* \n This will show building graph structures using the connections between patents - both the built-in connections in the patents themselves as well as the connections discovered while working with the patents as vectors. We apply some social network analysis to partition the patent graph and find other documents in the same technology space.\n</li>\n<li>Part III (5 mins): What have we built?*\n Now that we have done all this analysis, we can see some interesting things about the patent database as a whole. How does the patent database act as a map to the world of technology? And how has this helped with the original problem - finding better prior art?</li>\n</ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011HowToKillAPatentWithPython269.mp4", 
      "tags": [
        56, 
        641, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "How to kill a patent with Python", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T20:28:34+00:00", 
      "source_url": "http://blip.tv/file/4879824", 
      "video_ogv_length": "193772612", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011HowToKillAPatentWithPython488.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011HowToKillAPatentWithPython488.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011HowToKillAPatentWithPython889.png", 
      "slug": "pycon-2011--how-to-kill-a-patent-with-python"
    }, 
    "model": "videos.Video", 
    "pk": 425
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        227
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Deploying Applications with zc.buildout</p>\n<p>Presented by JIm Fulton</p>\n<p>\nThis talk described using zc.buildout for application deployment to production environments. It presents building self-contained source releases, and using these to create RPM distributions. It shows how to use buildout to configure services, including web servers, cron jobs, monitoring and so on. Finally, it presents ongoing efforts to deploy applications that span many machines.\n</p>\n<p>Abstract</p>\n<p>\nWe build and deploy large Python applications for our customers. These applications are built from many component parts including Python packages and non-python applications and tools. Assembling these pieces can be a tedious and error-prone process. The zc.buildout (Buildout) package was developed to automate this process.\n</p>\n<p>\nAs our use of buildout has matured, we've integrated it with system packaging tools and developed techniques for managing software deployemnt and service configuration. I'll provide a detailed description of the techniques and tools used.\n</p>\n<p>Outline:</p>\n<ul>\n<li>Buildout\n<ul>\n<li>Motivation\n</li>\n<li>History\n</li>\n<li>Configuration files\n</li>\n<li>Recipes\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Deployment pholisophy:\n   keeping software and service configuration separate\n</li>\n</ul>\n<ul>\n<li>System Packaging\n<ul>\n<li>Making self-contained source releases (tar balls)\n</li>\n<li>Creating system packages from source releases with RPM\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Service configuration -- system build outs\n<ul>\n<li>Scope: Python processes, cron, log rotation, run scripts, monitoring, etc.\n</li>\n<li>Place files in \"standard\" locations.\n</li>\n<li>Run by root\n</li>\n<li>examples\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Meta recipes\n<ul>\n<li>Goal: provide only essential information.\n</li>\n<li>Recipes provide basic level of abstraction.\n</li>\n<li>Buildout provides basic tools to build on these abstractions, but these tools only scale so far.\n</li>\n<li>Buildout configuration language is *not* a programming language.\n</li>\n<li>Meta-recipes provide a much more powerful way to build high-level abstractions over basic recipes.\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Next step: Make me a ...\n<ul>\n<li>Model based definition of complete systems spanning multiple hosts with interlocking services\n\n</li>\n<li>Automatic management of resources\n</li>\n<li>Implemented with ssh, system packaging tools (e.g. yum) and buildout-based tools.\n</li>\n<li>Four levels of abstraction\n</li>\n<li>Current status\n</li>\n</ul></li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011DeployingApplicationsWithZcbuildout832.mp4", 
      "tags": [
        29, 
        231, 
        489, 
        250
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Deploying Applications with zc.buildout", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T20:17:07+00:00", 
      "source_url": "http://blip.tv/file/4879794", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011DeployingApplicationsWithZcbuildout241.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011DeployingApplicationsWithZcbuildout241.ogv\"\n  })\n</script>", 
      "video_ogv_length": "155307917", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011DeployingApplicationsWithZcbuildout710.png", 
      "slug": "pycon-2011--deploying-applications-with-zc-buildo"
    }, 
    "model": "videos.Video", 
    "pk": 426
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        228
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Why is Python slow and how PyPy can help?</p>\n<p>Presented by Maciej Fijalkowski and Alex Gaynor</p>\n<p>\nPyPy is a virtual machine for Python, featuring an advanced just in time compiler, which can deliver exceptional performance. This talk is going to be a deep dive into what exactly makes Python such a hard language to optimize, how PyPy is organized, and what optimizations our JIT can do (and what it can't do) for your code.\n</p>\n<p>Abstract</p>\n<p>\nThe talk will detail how a python interpreter works internally and why some operations are costly. We'll go through several python features, how they work, why they're slow in CPython and how we're fixing it.\n</p>\n<p>\nThe list of mentioned features is not exhaustive, however we will try to focus at least on the following:\n</p>\n<ul>\n<li><p>Dynamic language - In Python code we have no known types, like a statically typed language. Even operations like \"a + b\" can do anything, unless we know more about the code, and the types it is operating on.</p>\n</li><li><p>Frame introspection - Frame objects need to be allocated for every function call, and all local variables are stored on the frame, and must be accessible from further down the call stack.</p>\n<p>PyPy uses a novel approach called \"virtualizables\" which makes it possible to avoid frame allocation in most common cases.</p>\n</li><li><p>Object model - All user defined Python objects have a dictionary which stores their attributes, as does every type. When Python does an attribute lookup this requires at least two dictionary lookups.</p>\n<p>In PyPy we use an approach similar to the one used by V8 with hidden classes (except more PyPy specific) called map dictionaries and other optimizations.</p>\n</li><li><p>FFI calls - Calling C from Python is costly and hard to optimize. In PyPy we expose C APIs to Python code via ctypes. This part explains how we can optimize ctypes calls.</p>\n</li><li><p>array module - Users of CPython's array module probably know it can save them quite a bit of memory, however it's also slower than using a list, due to the overhead of boxing and unboxing on every operations. Here we will tie everything together and describe how the array module is much faster with PyPy's JIT, combining our optimizations to: unbox values, remove the dynamicism within traces, and deliver great performance.</p>\n</li></ul>\n", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011WhyIsPythonSlowAndHowPyPyCanHelp563.mp4", 
      "title": "Why is Python slow and how PyPy can help?", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--why-is-python-slow-and-how-pypy-can-h", 
      "tags": [
        642, 
        231, 
        489, 
        91, 
        643
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T20:11:30+00:00", 
      "source_url": "http://blip.tv/file/4879780", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011WhyIsPythonSlowAndHowPyPyCanHelp115.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011WhyIsPythonSlowAndHowPyPyCanHelp115.ogv\"\n  })\n</script>", 
      "video_ogv_length": "154529169", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011WhyIsPythonSlowAndHowPyPyCanHelp525.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 427
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        229
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Genetic Programming in Python</p>\n<p>Presented by Eric Floehr</p>\n<p>\nDid you know you can create and evolve programs that find solutions to problems? This talk walks through how to use Genetic Algorithms and Genetic Programming as tools to discover solutions to hard problems, when to use GA/GP, setting up the GA/GP environment, and interpreting the results. Using <a href=\"http://pyevolve.sourceforge.net/\">pyevolve</a>, we'll walk through a real-world implementation creating a GP that predicts the weather.\n</p>\n<p>Abstract</p>\n<p>\nGenetic Algorithms (GA) and Genetic Programming (GP) are methods used to search for and optimize solutions in large solution spaces. GA/GP use concepts borrowed from natural evolution, such as mutation, cross-over, selection, population, and fitness to generate solutions to problems. If done well, these solutions will become better as the GA/GP runs.\n</p>\n<p>\nGA/GP has been used in problem domains as diverse as scheduling, database index optimization, circuit board layout, mirror and lens design, game strategies, and robotic walking and swimming. They can also be a lot of fun, and have been used to evolve aesthetically pleasing artwork, melodies, and approximating pictures or paintings using polygons.\n</p>\n<p>\nGA/GP is fun to play with because often-times an unexpected solution will be created that will give new insight or knowledge. It might also present a novel solution to a problem, one that a human may never generate. Solutions may also be inscrutable, and determining why a solution works is interesting in itself.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011GeneticProgrammingInPython353.mp4", 
      "title": "Genetic Programming in Python", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        644, 
        645, 
        646, 
        647, 
        231, 
        489, 
        648
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T20:09:26+00:00", 
      "source_url": "http://blip.tv/file/4879765", 
      "video_ogv_length": "223902641", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011GeneticProgrammingInPython162.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011GeneticProgrammingInPython162.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011GeneticProgrammingInPython350.png", 
      "slug": "pycon-2011--genetic-programming-in-python"
    }, 
    "model": "videos.Video", 
    "pk": 428
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        230
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>CouchDB and Python in practice</p>\n<p>Presented by Luke Gotszling</p>\n<p>\nThis talk introduces one 'NoSQL' solution, CouchDB, and how to get it to play well with Python. Topics covered:\n</p>\n<ul>\n<li>Introduction to CouchDB\n</li><li>A python ORM for CouchDB\n</li><li>Parsing CouchDB documents within python\n</li><li>Writing view functions in python\n</li><li>Map/reduce on CouchDB from python\n</li><li>Lessons learned from managing and distributing a live deployment at scale under high load\n</li></ul>\n<p>Abstract</p>\n<p>\nThis is a rough draft\n</p>\n<p>NoSQL</p>\n<ul>\n<li>CouchDB stores schema free documents\n</li></ul>\n<p>Why CouchDB?</p>\n<ul>\n<li>Complicated mapping structures handled\n</li><li>Revision history\n</li><li>Maps nicely to Python objects\n</li><li>HTTP protocol\n</li></ul>\n<p>Python ORM</p>\n<ul>\n<li>couchdb-python\n</li><li>Mapping structures\n</li><li>demo\n</li></ul>\n<p>View functions</p>\n<ul>\n<li>write in Erlang, Javascript, Python?\n</li><li>demo\n</li></ul>\n<p>Scaling</p>\n<ul>\n<li>Distributed map/reduce\n</li><li>BigCouch\n</li><li>Read/write quorum\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011CouchDBAndPythonInPractice398.mp4", 
      "title": "CouchDB and Python in practice", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        649, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T17:54:20+00:00", 
      "source_url": "http://blip.tv/file/4879409", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011CouchDBAndPythonInPractice776.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011CouchDBAndPythonInPractice776.ogv\"\n  })\n</script>", 
      "video_ogv_length": "146366548", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011CouchDBAndPythonInPractice776.png", 
      "slug": "pycon-2011--couchdb-and-python-in-practice"
    }, 
    "model": "videos.Video", 
    "pk": 429
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        76
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>ZODB: A Python Persistence System</p>\n<p>Presented by Chris McDonough</p>\n<p>\n<a href=\"http://zodb.org/\">ZODB</a> is a transactional persistence system written entirely in Python. This talk will serve as an introduction to using the ZODB in a Python application.\n</p>\n<p>Abstract</p>\n<p>\nThis talk will provide a high-level overview of ZODB useful to a novice or intermediate Python programmer. The talk will cover the following topics:\n</p>\n<ul>\n<li>What Is ZODB?\n</li><li>Brief history\n</li><li>ZODB vs. relational databases\n</li><li>ZODB vs. NoSQL databases\n</li><li>ZODB vs. pickle\n</li><li>Using ZODB\n</li><li>Creating a Persistent Object\n</li><li>Storing a Persistent Object\n</li><li>Retrieving a Persistent Object\n</li><li>Modifying a Persistent Object\n</li><li>Saving Changes\n</li><li>Folders\n</li><li>Aspects\n</li><li>Pluggable storages\n</li><li>Scaling across multiple clients\n</li><li>Caching\n</li><li>Indexing and Searching\n</li><li>repoze.catalog\n</li></ul>\n<p>\nAt the end of the talk, an attendee should have a basic understanding of how to create an application which depends on ZODB persistence.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011ZODBAPythonPersistenceSystem261.mp4", 
      "tags": [
        231, 
        489, 
        279
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--zodb--a-python-persistence-system", 
      "title": "ZODB: A Python Persistence System", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T17:48:15+00:00", 
      "source_url": "http://blip.tv/file/4879397", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011ZODBAPythonPersistenceSystem856.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011ZODBAPythonPersistenceSystem856.ogv\"\n  })\n</script>", 
      "video_ogv_length": "175860855", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011ZODBAPythonPersistenceSystem382.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 430
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        231
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Dependency management with Puppet</p>\n<p>Presented by Richard Crowley</p>\n<p>\nPuppet is a configuration management tool that we'll learn to use the easy way. We'll introduce the Puppet language and the concept of resources like packages, files, shell commands, and more. We'll use Puppet to build our dev environment and deploy it to production servers.\n</p>\n<p>Abstract</p>\n<p>\nWe've all been there: religiously following the steps in some blog post for the 47th time trying to setup a shiny new server. We thought we'd improved the situation when we copied our Bash history into doit.sh and committed it. Then along came Pip and requirements.txt files.\n</p>\n<p>\nThat's where most of us are today. Pip can only manage Python packages so much of our servers' behavior is left to Lady Luck. Puppet gives us the power to efficiently and confidently specify everything our program needs.\n</p>\n<p>\nWe'll start at square one and the concept of resources, the basic unit of configuration management. We'll learn the Puppet language's resource syntax. We'll talk about obvious resource types like packages and files plus less obvious types like shell commands, users, groups, and daemons. We'll compose resources into larger ones, declare dependencies between resources, and accommodate differences between OS X and Linux.\n</p>\n<p>\nThese Puppet manifests can satisfy our program's dependencies on demand, making them ideal parts of the deploy process. We'll walk through how Puppet is used to build production environments both through tools such as Fabric and Puppet's traditional client-server mode.\n</p>\n<p>\nDependency hell doesn't have to be your reality. Consistent, reliable environments can be had with Puppet.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011DependencyManagementWithPuppet138.mp4", 
      "tags": [
        93, 
        650, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Dependency management with Puppet", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T17:42:05+00:00", 
      "source_url": "http://blip.tv/file/4879368", 
      "video_ogv_length": "153342144", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011DependencyManagementWithPuppet233.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011DependencyManagementWithPuppet233.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011DependencyManagementWithPuppet645.png", 
      "slug": "pycon-2011--dependency-management-with-puppet"
    }, 
    "model": "videos.Video", 
    "pk": 431
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        232
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>The Development of Python and You</p>\n<p>Presented by Brian Curtin</p>\n<p>\nHave an inside look at what it takes to work on CPython, from getting setup with the source and navigating the bug tracker, to the best practices for having your work accepted. We'll find, categorize, and fix an issue in Python to get you started. This talk is ideal for those who are new to open source projects or are interested in the Python development process.\n</p>\n<p>Abstract</p>\n<p>\nPeople from all backgrounds, users of all platforms, and developers of all levels are necessary in the development of Python. From writing code to documentation, it takes all kinds of people to make an impact. If you've used Python, we need you, and what better place to get involved than at PyCon?\n</p>\n<p>\n2010 saw a rise in the number of contributors to CPython, and the PSF stepped in to support the efforts of those wanting to get involved. Are you up for the challenge? This talk dives right into what it takes to get involved, covering the who, what, where, when, and why of Python development, going through the whole process live.\n</p>\n<p>\nAfter the conference is over, stick around with the CPython crew and hack away!\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011TheDevelopmentOfPythonAndYou825.mp4", 
      "tags": [
        600, 
        18, 
        84, 
        651, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "The Development of Python and You", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T17:36:39+00:00", 
      "source_url": "http://blip.tv/file/4879352", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011TheDevelopmentOfPythonAndYou683.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011TheDevelopmentOfPythonAndYou683.ogv\"\n  })\n</script>", 
      "video_ogv_length": "224156396", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011TheDevelopmentOfPythonAndYou317.png", 
      "slug": "pycon-2011--the-development-of-python-and-you"
    }, 
    "model": "videos.Video", 
    "pk": 432
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        233
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>web2py secrets</p>\n<p>Presented by Massimo Di Pierro</p>\n<p>\nWe will provide an introduction to web2py with particular focus on its design objectives, its differences when compared to other web frameworks, and some of the most recently added features (components, plugins, openid/oauth integration).\n</p>\n<p>Abstract</p>\n<p>\nWeb2py is a framework for rapid web application development of secure database-driven web applications. In this tutorial we will provide a brief introduction to web2py, the web based IDE, its internal design, and its internal file organization. We will explain the motivations behind some of its most controversial design goals. We will also discuss in some detail its Ajax capabilities by using web2py components and plugins for modular design of rich web interfaces.\n</p>\n<p>\nThis will be a very concentrated version (10%) of a course (CSC438) on web frameworks the author teaches at DePaul University. The course has been taught 3 times and the last time counted more than 30 students.\n</p>", 
      "title": "web2py secrets tutorial (1/2)", 
      "copyright_text": "Creative Commons Attribution-NoDerivs 3.0", 
      "tags": [
        231, 
        489, 
        92, 
        287
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T17:07:25+00:00", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Mdipierro-web2pyTutorialPycon201112623-523.jpg", 
      "embed": "<embed src=\"http://blip.tv/play/AYKq8zIC\" type=\"application/x-shockwave-flash\" width=\"768\" height=\"606\" allowscriptaccess=\"always\" allowfullscreen=\"true\"></embed>", 
      "source_url": "http://blip.tv/file/4879126", 
      "slug": "pycon-2011--web2py-secrets-tutorial--1-2"
    }, 
    "model": "videos.Video", 
    "pk": 433
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        122
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>An (biased) survey of the python web</p>\n<p>Presented by Mark Ramm</p>\n<p>\nI may be BDFL of one framework, but that's also why I pay attention to the whole ecosystem. From the release of Plone 4, TurboGears 2, Django 1.2 and Pylons 1 ,it's been an interesting year. And things like html5lib, an updated WSGI spec, and a contender for the next generation WSGI have all made things interesting. Come explore the wild and dynamic jungle that I call \"the python web toolkit.\"\n</p>\n<p>Abstract</p>\n<p>\nThis talk will not teach people to use python to make websites. It's to teach people who already use python, that there are lots of different tools out there, and to help us all get some perspective on the python web toolkit.\n</p>\n<p>\nIn 2005 Pycon had the great PyWebOff, and while this talk won't be about throwing Twisted into a cage match with Zope3, or setting Flask up in a fight to the death against web.py, it will one again provide an attempt to survey the full landscape of the python web world, and to see how far we've come in the last 5 years.\n</p>\n<p>\nWe've definitely come a long way. Django has brought over many converts to Python, google released app engine with python as the first supported language, and there are quite a few sites in the top 100 using python to serve up dynamic content to hundreds of millions of users.\n</p>\n<p>\nBut it hasn't all been good either, there's more fragmentation than ever. We've also got more half finished libraries, and broken framework extensions, and abandoned projects littering up the landscape.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011AnBiasedSurveyOfThePythonWeb572.mp4", 
      "title": "An (biased) survey of the python web", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        231, 
        489, 
        92, 
        652
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T16:43:42+00:00", 
      "source_url": "http://blip.tv/file/4879238", 
      "video_ogv_length": "135394179", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011AnBiasedSurveyOfThePythonWeb816.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011AnBiasedSurveyOfThePythonWeb816.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011AnBiasedSurveyOfThePythonWeb847.png", 
      "slug": "pycon-2011--an--biased--survey-of-the-python-web"
    }, 
    "model": "videos.Video", 
    "pk": 434
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        234
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Supporting All Versions of Python All The Time With Tox</p>\n<p>Presented by Kumar McMillan</p>\n<p>\nThis talk explains the modern techniques that every module maintainer needs to know in order to support all major versions of Python. You probably already have a massive test suite using a tool like nosetests, py.test, unittest, or a custom runner. Using the tox command line tool, you'll see how to run your tests in Python 2.x, 3.x, Jython, and whatever else in parallel.\n</p>\n<p>Abstract</p>\n<p>\ntox is a new tool that lets you set up isolated virtual environments to test your module's deployment and compatibility with all major versions of Python. It's easy to install and is flexible enough that it probably already supports your existing test suite. With one simple command you can execute your test suite in each version of Python, you can build its documentation with Sphinx, and get a nice printout of the results. It has also been designed from the ground up to integrate into continuous integration (CI) tools like Hudson.\n</p>\n<p>\nUsing practical examples, this talk will show you how to toxify your existing test suite and trick it out with the tox.ini config file. You'll also see how to leverage Hudson's matrix build so that each code checkin will run tests in all versions of Python and report detailed failures.\n</p>\n<p>\nYour app supports Python 3, right? No? Tox is the best way to develop in parallel with 2.x and 3.x. We'll go over how to set up tox for that.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011SupportingAllVersionsOfPythonAllTheTimeWithT424.mp4", 
      "title": "Supporting All Versions of Python All The Time With Tox", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        70, 
        448, 
        231, 
        489, 
        21, 
        653
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T16:25:58+00:00", 
      "source_url": "http://blip.tv/file/4879179", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011SupportingAllVersionsOfPythonAllTheTimeWithT208.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011SupportingAllVersionsOfPythonAllTheTimeWithT208.ogv\"\n  })\n</script>", 
      "video_ogv_length": "112153712", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011SupportingAllVersionsOfPythonAllTheTimeWithT333.png", 
      "slug": "pycon-2011--supporting-all-versions-of-python-all"
    }, 
    "model": "videos.Video", 
    "pk": 435
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        235
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Introduction to Parallel Computing on an NVIDIA GPU using PyCUDA</p>\n<p>Presented by Roy Hyunjin Han</p>\n<p>\nWith Andreas Kl\u00f6ckner's PyCUDA, you can harness the massively parallel supercomputing power of your NVIDIA graphics card to crunch numerically intensive scientific computing applications in a fraction of the runtime it would take on a CPU and at a fraction of the development cost of C++. We'll cover hardware architecture, API fundamentals and several examples to get you started.\n</p>\n<p>Abstract</p>\n<p>\nThere are two approaches to parallelizing a computationally heavy procedure: use a messaging queue such as AMQP to distribute tasks among a networked cluster or increase the number of processors in a single machine. This talk focuses on techniques for adapting mathematical code to run on specialized multi-core graphic processors.\n</p>\n<p>\nModern graphic processors have hard-coded transistors for common vector and matrix operations, making them ideal for general scientific computing. However, the NVIDIA CUDA's unique design requires knowledge of its hardware to adapt algorithms effectively. This talk covers basic CUDA architecture, API functions and several examples to illustrate the different kinds of problems that will benefit from parallelization.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011IntroductionToParallelComputingOnAnNVIDIAGPUU886.mp4", 
      "tags": [
        654, 
        655, 
        231, 
        489, 
        656
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--introduction-to-parallel-computing-on", 
      "title": "Introduction to Parallel Computing on an NVIDIA GPU using PyCUDA", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T16:21:17+00:00", 
      "source_url": "http://blip.tv/file/4879164", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011IntroductionToParallelComputingOnAnNVIDIAGPUU479.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011IntroductionToParallelComputingOnAnNVIDIAGPUU479.ogv\"\n  })\n</script>", 
      "video_ogv_length": "155224241", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011IntroductionToParallelComputingOnAnNVIDIAGPUU724.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 436
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Panel: Python in Schools: Teaching It and Teaching With It.</p>\n<p>Panel with Joel Zachary Miller, Jeffrey Elkner, Vern Ceder, Brian C. Brumley, Maria Litvin</p>\n<p>\nEducators discuss Python as both a subject and a tool in primary and secondary (K12) education. Topics addressed include the distinction between teaching Python and teaching with Python, the benefits of Python in K12 and ways to demonstrate the value of Python to administrators. Panel includes private and public K12 educators and university faculty involved in instruction in the K12 setting.\n</p>\n<p>Abstract</p>\n<p>\nZac Miller will act as panel moderator.\n</p>\n<p>\nPanel will open with a brief introduction of the origins of the panel and self introductions of panel members before addressing the following topics:\n</p>\n<ul>\n<li>The distinction between teaching Python and teaching with Python.\n   <ul>\n<li>Teaching Python\n   </li><li>Teaching Math with Python\n   </li></ul>\n</li><li>How does Teaching with Python complement Teaching Python?\n   <ul>\n<li>Do tensions between the two exist?\n   </li></ul>\n</li><li>What keeps Python out of schools? What can be done to encourage more schools to teach tools like Python?\n</li><li>What is the biggest benefit teaching Python brings to your school and students? What is the biggest benefit in general, beyond your school?\n</li><li>Can teaching Python help spark creativity in those students who have trouble exercising it?\n   <ul>\n<li>When teaching Python a creativity divide becomes readily apparent among students. Students with a high level of curiosity and creativity constantly try new things on their own, while other students are focused solely on completing the assignments for grades. How can an instructor handle this?\n   </li><li>What tangible steps can an instructor take to encourage creativity?\n   </li></ul>\n</li><li>What does the future look like for Python in K12 education, both at our own schools and in general?\n</li><li>Audience Questions\n</li></ul>\n<p>Panel Biographies:</p>\n<p>\nVern Ceder, Director of Technology, Canterbury School, Ft Wayne, Indiana. The Canterbury School has been teaching at least a little Python to every single 8th and 9th grader in the school since 2001, as well as offering electives in Python, Java, C, etc. Vern also teaches Python through Northwestern's Gifted Learning Links program (<a href=\"http://www.ctd.northwestern.edu/gll/\">http://www.ctd.northwestern.edu/gll/</a>) and is the author of The Quick Python Book, 2nd ed (<a href=\"http://www.manning.com/ceder\">http://www.manning.com/ceder</a>)\n</p>\n<p>\nMaria Litvin. Maria teaches Math and Computer Science at Phillips Academy in Andover, MA, including \"Introduction to Discrete Mathematics and Programming in Python.\" She also taught Python to Boston-area high school teachers and to middle schoolers in Google's CAPE program. She's co-author of several Computer Science textbooks, most recently Mathematics for the Digital Age and Programming in Python (<a href=\"http://www.skylit.com/mathandpython.html\">www.skylit.com/mathandpython.html</a>).\n</p>\n<p>\nJeffrey Elkner, teaches computer programming and information technology at the Governor's Career and Technical Academy in Arlington, Virginia. He has been teaching with Python since 1999, and is co-author of a free on-line textbook: How to Think Like a Computer Scientist: Learning with Python. He also maintains the Open Book Project (<a href=\"http://openbookproject.net/\">http://openbookproject.net</a>), which contains several Python resources. Jeff has attended each PyCon held thus far, often bringing students along with him.\n</p>\n<p>\nBrian Brumley teaches Python (and lots of other stuff) to grades 6-8 at Porter-Gaud school in Charleston, SC. Brian is a regular presenter at state and regional conferences on technology and programming in schools.\n</p>\n<p>\nZac Miller is adjunct instructor in the STEM school at Gainesville State College and a faculty member at the Da Vinci Academy at South Hall Middle School in Gainesville, Georgia. Zac is currently teaching Python programming and Python programming for Geographic Information Systems to K12 and college-level students.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PanelPythonInSchoolsTeachingItAndTeachingWith577.mp4", 
      "tags": [
        231, 
        489, 
        288
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Panel: Python in Schools: Teaching It and Teaching With It.", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T16:04:26+00:00", 
      "source_url": "http://blip.tv/file/4879118", 
      "video_ogv_length": "214438138", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PanelPythonInSchoolsTeachingItAndTeachingWith466.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PanelPythonInSchoolsTeachingItAndTeachingWith466.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PanelPythonInSchoolsTeachingItAndTeachingWith796.png", 
      "slug": "pycon-2011--panel--python-in-schools--teaching-it"
    }, 
    "model": "videos.Video", 
    "pk": 437
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        236
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Prototyping Go's Select with stackless.py for Stackless Python</p>\n<p>Presented by Andrew Francis</p>\n<p>\nShowing how to use Python to prototype powerful concurrency features for Stackless Python. We do want you to try this at home.\n</p>\n<p>Abstract</p>\n<p>\nGoogle\u2019s introduction of the Go language raised eyebrows in the Stackless Python community. Although very different languages, Go and Stackless Python\u2019s concurrency model share a common ancestor: the Bell Labs family of languages (i.e., Newsqueak, Limbo). The common feature are channels: a synchronous message passing mechanism based on Tony Hoare\u2019s Communicating Sequential Processes (CSP).\n</p>\n<p>\nBoth Go and Python have channels. However with the select language statement, Go has the ability to wait on multiple channels simultaneously. Select greatly simplifies many concurrent programming problems. Stackless Python does not have this feature. Other channel based languages also feature powerful concurrency constructs. How hard would these constructs be to implement for Stackless Python?\n</p>\n<p>\nThis talk explores the prototyping potential of stackless.py, the PyPy's framework's implementation of Stackless Python. The beauty of stackless.py is that it is written in Python and implements much of Stackless Python's API! The \"case study\" involves prototyping Go's select in stackless.py before reimplementing select in C based Stackless Python.\n</p>\n<p>\nDuring this talk, it will be shown how stackless.py can be used with CPython and the greenlet package (no need to install another Python). The audience will also get an in depth look at how channels are implemented. Channels are at the heart of Stackless Python's message based concurrency model. Finally the audience will gain insights into future directions of Stackless Python.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PrototypingGosSelectWithStacklesspyForStackless151.mp4", 
      "tags": [
        657, 
        658, 
        581, 
        231, 
        489, 
        91, 
        211
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Prototyping Go's Select with stackless.py for Stackless Python", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T15:43:06+00:00", 
      "source_url": "http://blip.tv/file/4879050", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PrototypingGosSelectWithStacklesspyForStackless642.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PrototypingGosSelectWithStacklesspyForStackless500.ogv\"\n  })\n</script>", 
      "video_ogv_length": "128259672", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PrototypingGosSelectWithStacklesspyForStackless735.png", 
      "slug": "pycon-2011--prototyping-go--39-s-select-with-stac"
    }, 
    "model": "videos.Video", 
    "pk": 438
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        237
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>HTTP in Python: which library for what task?</p>\n<p>Presented by Augie Fackler</p>\n<p>\nHTTP is the lingua franca of the web, and many things done in Python depend on it, yet HTTP in Python isn't always as good as one would expect. It's well worth knowing the options and tradeoffs available.\n</p>\n<p>Abstract</p>\n<p>\nHTTP in Python is very much a mixed bag of available technology. What's implemented mostly works well, but there are some frustrating gaps in different libraries that are poorly documented. I've gone wading through every HTTP library I can find for Python while trying to fix an obscure bug in Mercurial and decided to write my own. I'll cover what's available today and why I'm starting from scratch with a completely new implementation.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011HTTPInPythonWhichLibraryForWhatTask393.mp4", 
      "title": "HTTP in Python: which library for what task?", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--http-in-python--which-library-for-wha", 
      "tags": [
        659, 
        231, 
        489, 
        660, 
        661
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T14:55:00+00:00", 
      "source_url": "http://blip.tv/file/4878918", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011HTTPInPythonWhichLibraryForWhatTask572.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011HTTPInPythonWhichLibraryForWhatTask572.ogv\"\n  })\n</script>", 
      "video_ogv_length": "84877399", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011HTTPInPythonWhichLibraryForWhatTask758.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 439
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        238
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Opening the Flask</p>\n<p>Presented by Armin Ronacher</p>\n<p>\nAfter a year of the Flask microframework it's time to draw some conclusions, see things that went right and things that should be improved. The talk gives both an introduction into Flask itself as well as well as the ecosystem that evolved around it.\n</p>\n<p>Abstract</p>\n<p>\nFlask is a microframework that was born out of an April's fool joke that quickly became more than that. Based on the powerful foundation of Werkzeug and Jinja2 it's one of the most popular frameworks for Python now.\n</p>\n<p>\nThe talk starts with a very quick introduction into Flask, where it all started and why I think people like it. We will look into the design of Flask and why it works the way it works.\n</p>\n<p>\nFurthermore we will look into the Flask ecosystem and how extensions work and have a brief look in what is planned for the future, especially regarding Python 3.\n</p>\n<p>\nThe talk assumes basic knowledge of web applications.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011OpeningTheFlask373.mp4", 
      "title": "Opening the Flask", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        662, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T14:52:32+00:00", 
      "source_url": "http://blip.tv/file/4878916", 
      "video_ogv_length": "180884321", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011OpeningTheFlask874.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011OpeningTheFlask874.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011OpeningTheFlask360.png", 
      "slug": "pycon-2011--opening-the-flask"
    }, 
    "model": "videos.Video", 
    "pk": 440
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        194
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Documentation Driven Development</p>\n<p>Presented by Corey Oordt</p>\n<p>\nDevelopers usually leave documentation as a final step; one that they will get to as soon as they are forced with threats of bodily harm. Writing the documentation before writing the code, can lead to better code, better implementation and, of course, actual documentation.\n</p>\n<p>Abstract</p>\n<p>\n\"Documentation Driven Design\" was coined by our team after noticing how documenting code dramatically changed how we approached problems. By writing the documentation first, you saw the problem from a different perspective: the end user or programmer. This talk will focus on a few items:\n</p>\n<p>\nUsable, not just functional. Many times developers write code that solves the problem, but is a real pain in the neck to use. Writing the documentation first demonstrates how easy or difficult it is to implement the solution right away.\n</p>\n<p>\nA guide to what to write. Many developers leave documentation undone because they don't know how to approach it. Having some idea of what needs writing can make the task seem less daunting.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011DocumentationDrivenDevelopment490.mp4", 
      "title": "Documentation Driven Development", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        74, 
        663, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T14:47:20+00:00", 
      "source_url": "http://blip.tv/file/4878896", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011DocumentationDrivenDevelopment121.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011DocumentationDrivenDevelopment121.ogv\"\n  })\n</script>", 
      "video_ogv_length": "147964892", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011DocumentationDrivenDevelopment665.png", 
      "slug": "pycon-2011--documentation-driven-development"
    }, 
    "model": "videos.Video", 
    "pk": 441
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        239
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Advanced Network Architectures With ZeroMQ</p>\n<p>Presented by Zed A. Shaw</p>\n<p>\nIn this talk I will demonstrate how to use ZeroMQ with Python (and others) to do really advanced or even weird network architectures. You'll see Python talk to other languages, handle HTTP, JSON, XML, WebSockets, encode videos, chat messaging, etc. All in a short talk with only code, no diagrams. You should know ZeroMQ already.\n</p>\n<p>Abstract</p>\n<p>\nThis talk will demonstrate a series of progressively difficult problems that you can solve with ZeroMQ:\n</p>\n<ol>\n<li>Basic messaging types (request/response, publish/subscribe).\n</li><li>Mongrel2 and HTTP processing.\n</li><li>Coroutine based web frameworks and why they suck (so quit making them).\n</li><li>Distributed worker queues of various flavors.\n</li><li>Asynchronous chat protocols with JSON and XML.\n</li><li>Clusters of calculators considering and communicating.\n</li><li>Talking to other languages and easily ditching Python if you need.\n</li><li>Anything else I can think up and do in a single screen of Python.\n</li></ol>\n<p>\nThis talk will assume you know ZeroMQ and Python, but if you don't know ZeroMQ you can probably still keep up.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011AdvancedNetworkArchitecturesWithZeroMQ652.mp4", 
      "tags": [
        664, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--advanced-network-architectures-with-z", 
      "title": "Advanced Network Architectures With ZeroMQ", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T14:42:43+00:00", 
      "source_url": "http://blip.tv/file/4878885", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011AdvancedNetworkArchitecturesWithZeroMQ400.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011AdvancedNetworkArchitecturesWithZeroMQ400.ogv\"\n  })\n</script>", 
      "video_ogv_length": "140780098", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011AdvancedNetworkArchitecturesWithZeroMQ366.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 442
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        125
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Using Python 3 to Build a Cloud Computing Service for my Superboard II</p>\n<p>Presented by David Beazley</p>\n<p>\nThe OSI Superboard II was the computer on which I first learned to program back in 1979. Python is why programming remains fun today. In this tale of old meets new, I describe how I have used Python 3 to create a cloud computing service for my still-working Superboard--a problem complicated by it only having 8Kb of RAM and 300-baud cassette tape audio ports for I/O.\n</p>\n<p>Abstract</p>\n<p>\nPython 3, what good is it? Cloud computing? Bah! In this talk, I describe how I have used Python 3 to build a distributed cloud-computing service for my Superboard II system. Originally built in 1978, the Superboard is an obvious candidate for cloud computing due to its extremely constrained memory (8Kb), slow processor (a 1Mhz 6502), crippled I/O (300 baud over audio), and retro programming environment (Microsoft Basic 1.0). The only question is how to do it?\n</p>\n<p>\nTo answer that question, this talk consist of two main parts. In the first part, I discuss the problem of building a communications stack between the Superboard and a Mac using nothing but audio line-in/line-out ports--a problem involving a tricky I/O handling, real-time audio signal processing, and the creation of a data-link layer communication protocol. In the second part, I discuss the creation of a distributed cloud-computing service and related topics including messaging systems, key-value stores, map-reduce, etc.\n</p>\n<p>\nThe primary implementation language for all of this work is Python 3. Throughout the talk, I will mention interesting Python 3 programming idioms along with pros and cons. I'll conclude by summarizing my experience trying to build a significant project entirely in Python 3.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011UsingPython3ToBuildACloudComputingServiceFor309.mp4", 
      "tags": [
        231, 
        489, 
        665, 
        666
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Using Python 3 to Build a Cloud Computing Service for my Superboard II", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T14:37:51+00:00", 
      "source_url": "http://blip.tv/file/4878868", 
      "video_ogv_length": "234095870", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011UsingPython3ToBuildACloudComputingServiceFor624.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011UsingPython3ToBuildACloudComputingServiceFor624.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011UsingPython3ToBuildACloudComputingServiceFor438.png", 
      "slug": "pycon-2011--using-python-3-to-build-a-cloud-compu"
    }, 
    "model": "videos.Video", 
    "pk": 443
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        240
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Serious Business: Python is not just for Engineering</p>\n<p>Presented by Zach Steindler</p>\n<p>\nBuilding a great business is quite different from building a great product, but by measuring Key Performance Indicators (things like cash flow, if users keep coming back, etc.) you can make sure your business is on the right track. In this talk I'll cover common KPI in the tech business and show you how we automate collecting and presenting KPI at Olark.\n</p>\n<p>Abstract</p>\n<p>\nAs a hacker-turned-founder, you quickly realize there's more to building a great business than just building a great product. The easiest way to know your business is on the right track is to measure Key Performance Indicators (KPIs): things like cash flow, what parts of the product is used the most, if your users keep coming back, if users are experiencing problems... and many, many others. How are you supposed to keep track of it all without getting lost in a sea of noise?\n</p>\n<p>\nWith Python, of course! In this talk I'll cover the most common KPIs technology businesses track and show you how we used Python at Olark to automatically collect and present KPIs to the team. This has made it much easier to quickly answer business questions and help us know we're on the right track.\n</p>\n<p>\nSo if you're a Python hacker who would like to learn more about how to engineer a business, or if you're a business person who's just starting to learn Python, come learn how Python isn't just for engineering.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011SeriousBusinessPythonIsNotJustForEngineering661.mp4", 
      "tags": [
        667, 
        668, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Serious Business: Python is not just for Engineering", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T13:55:54+00:00", 
      "source_url": "http://blip.tv/file/4878796", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011SeriousBusinessPythonIsNotJustForEngineering647.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011SeriousBusinessPythonIsNotJustForEngineering647.ogv\"\n  })\n</script>", 
      "video_ogv_length": "83735655", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011SeriousBusinessPythonIsNotJustForEngineering609.png", 
      "slug": "pycon-2011--serious-business--python-is-not-just-"
    }, 
    "model": "videos.Video", 
    "pk": 444
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        113
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>API Design Anti-Patterns</p>\n<p>Presented by Alex Martelli</p>\n<p>\nDesigning interfaces so that other code can interact with ours (whether our code is a library, framework, application, website...) is a very common and clearly crucial activity, but fraught with dangers -- stuff we all keep doing wrong time after time. This talks shows some common cases of API design errors encountered in the wild, with tips on how to avoid them when you design your next API.\n</p>\n<p>Abstract</p>\n<p>\nWhenever we write code we should always be thinking about how other code (whether our own, or other people's) will interact with ours (an \"API\", in common parlance). Indeed, the most common and terrible mistake in API design is... not doing any! -- i.e., not providing any designed, architected way for other code to interact with ours. That's fortunately less common when \"our code\" is a library or framework;-), but, alas!, sadly widespread when \"our code\" is an application or website -- that's why questions about screen-scraping the web and simulating keystrokes and mouse gestures need be so tragically frequent all over the web.\n</p>\n<p>\nOnce past the obvious hurdle of not having any API at all, there's still plenty of ways we can go badly wrong in the process of designing one -- and many of those ways fall into recognizable categories, i.e., patterns. Specifically, since they're frequently observed categories of defective design, they're anti-patterns -- and that's what this talk is in fact about (as the smartest among you could tell from the title...).\n</p>\n<p>\nI'm eminently qualified to present on this subject, since, in a lifetime spent mostly stumbling into software (after actually qualifying to design hardware in college, but only doing that for a few years), I've been responsible for more of my shares of API design fumbles (plus, of course, just like every other programmer, I've done my share of swearing at the design fumbles of other API designers). And, as novelist Richard Bach reminds us, \"You teach best what you most need to learn\"!-)\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011APIDesignAntipatterns304.mp4", 
      "title": "API Design anti-patterns", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--api-design-anti-patterns", 
      "tags": [
        69, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T13:54:20+00:00", 
      "source_url": "http://blip.tv/file/4878793", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011APIDesignAntipatterns279.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011APIDesignAntipatterns387.ogv\"\n  })\n</script>", 
      "video_ogv_length": "222617966", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011APIDesignAntipatterns897.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 445
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        76, 
        241, 
        122
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>State of Pylons/TurboGears 2/repoze.bfg</p>\n<p>Presented by Chris McDonough, Ben Bangert, and Mark Ramm</p>\n<p>\nA three-for-one talk by the main developers of three popular Python web frameworks! We'll (very) briefly cover the state of each of our individual frameworks and communities, and then we'll describe the results of our efforts to work together and share code.\n</p>\n<p>Abstract</p>\n<p>\nPylons is a popular, lightweight Python web framework.\n</p>\n<p>\nTurboGears 2 is a full-stack framework built atop Pylons.\n</p>\n<p>\nrepoze.bfg is a moderately popular, lightweight Python web framework.\n</p>\n<p>\nThe main developers and community leaders of these frameworks have been working together and sharing as much as possible over the course of roughly the last year. We'll very briefly describe to the audience the states of our individual efforts, then we'll discuss how we intend to move forward and share more code and effort in the year to come. The talk will be more socially-oriented than technical.\n</p>\n<p>\nIt's unusual for open source code and communities to bridge minor perceived differences in scope and style and to start sharing code and ideas openly. If you're a user of any of these frameworks, you'll want to be present for this talk.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011StateOfPylonsTurboGears2repozebfg617.mp4", 
      "title": "State of Pylons/TurboGears 2/repoze.bfg", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        231, 
        489, 
        229, 
        572, 
        267, 
        230
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T13:51:11+00:00", 
      "source_url": "http://blip.tv/file/4878787", 
      "video_ogv_length": "236700267", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011StateOfPylonsTurboGears2repozebfg403.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011StateOfPylonsTurboGears2repozebfg403.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011StateOfPylonsTurboGears2repozebfg818.png", 
      "slug": "pycon-2011--state-of-pylons-turbogears-2-repoze-b"
    }, 
    "model": "videos.Video", 
    "pk": 446
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        140
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Python-Aware Python</p>\n<p>Presented by Ned Batchelder</p>\n<p>\nPython provides many features for introspecting, analyzing, parsing, compiling, and otherwise grokking Python code. This talk will cover a number of the techniques for writing Python-Aware Python, and will hopefully inspire you to build the next great Python tool.\n</p>\n<p>Abstract</p>\n<p>\nPython provides many features for introspecting, analyzing, parsing, compiling, and otherwise grokking Python code. These modules and techniques provide the foundation for developer's tools such as autocompletion IDE's, code analysis tools, test runners, profilers, and so on.\n</p>\n<p>\nI'll delve into a number of the common techniques used to write Python-Aware Python. Each has its area of applicability and its strengths and weaknesses. I'll demonstrate small samples that show how those techniques underlie the tools we all know and love.\n</p>\n<p>\nThe world of Python tools is ready for new exploration. This talk will give you the foundation you need to write the next great Python-aware application.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonAwarePython911.mp4", 
      "title": "Python-Aware Python", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        408, 
        669, 
        670, 
        671, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T13:47:11+00:00", 
      "source_url": "http://blip.tv/file/4878776", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonAwarePython217.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PythonAwarePython217.ogv\"\n  })\n</script>", 
      "video_ogv_length": "222244649", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PythonAwarePython331.png", 
      "slug": "pycon-2011--python-aware-python"
    }, 
    "model": "videos.Video", 
    "pk": 447
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Django Packages: A Case Study</p>\n<p>Daniel Greenfeld</p>\n<p>\nDjango Packages is the place to review Django apps, frameworks, and projects. This talk is for everyone, including non-Django users, and covers everything from architecture, API development, to interacting with PyPI, Github, Bitbucket, etc. It will include tools, lessons learned, and projects that fork the code to save the world and will finish with an overview of the forthcoming pypackages.com.\n</p>\n<p>Abstract</p>\n<p>\nSince launch Django Packages has become the place to find and compare apps, frameworks and projects produced by the Django Community. Through the use of public APIs, Django Packages constantly fetches hard data from PyPI, Github, and Bitbucket, aproviding a powerful mash-up of real-world data on the volume of usage of a particular package. At a glance you can see which package is the most downloaded, which is the most used, and which has seen ongoing development.\n</p>\n<p>\nThe project is open sourced on Github, with all non-user data accessible available via the API. Django Packages was conceived and and launched in the 2010 Django Dash. Since launch it has seen features added incrementally and was a frequently mentioned project at the 2010 DjangoCon and was #1 on Hacker News on Sunday, December 5, 2010. It's purpose is to provide a place for Django Developers to submit, research, and review apps, projects, and frameworks.\n</p>\n<p>\nThe talk will cover:\n</p>\n<ul>\n<li>Launching the project\n   <ul>\n<li>The pre-Django Packages state of finding Django apps\n   </li><li>Grids, not tags\n   </li><li>Only hard metrics allowed, no opinions or rating systems!\n   </li><li>Slurping content from PyPI, Github, Bitbucket, Launchpad, SourceForge, and Google Project Hosting\n   </li><li>Lessons Learned AKA The Zen of Python and PEP-8\n   </li><li>Deployment and backups\n   </li></ul>\n</li><li>The Month after launch\n   <ul>\n<li>New feature considerations\n   </li><li>Handing over the keys to reduce bus factor\n   </li><li>Excitement when seeing it being used as a reference\n   </li></ul>\n</li><li>DjangoCon\n   <ul>\n<li>Sprint tactics for your pet project\n   </li><li>Development of an API\n   </li><li>Github, Google Project Hosting, and PyPI\n   </li></ul>\n</li><li>Going forward\n   <ul>\n<li>Planned new features for Django Packages\n   </li><li>Forking Django Packages to save the world\n   </li><li>pypackages.com - a forthcoming place to review Python applications, frameworks, and packages\n   </li></ul>\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011DjangoPackagesACaseStudy276.mp4", 
      "tags": [
        0, 
        672, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--django-packages--a-case-study", 
      "title": "Django Packages: A Case Study", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T13:43:09+00:00", 
      "source_url": "http://blip.tv/file/4878766", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011DjangoPackagesACaseStudy747.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011DjangoPackagesACaseStudy747.ogv\"\n  })\n</script>", 
      "video_ogv_length": "161676965", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011DjangoPackagesACaseStudy119.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 448
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        243
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Extreme Network Programming with Python and Linux</p>\n<p>Presented by Rob Ludwick</p>\n<p>\nTraditionally, C is the preferred language for low level network programming and works well for those who have the time and patience to work with it. As it turns out, Python is very capable for prototyping low level network code, collecting data, and testing ideas quickly without getting lost in the land of C.\n</p>\n<p>Abstract</p>\n<p>\nWhile not as robust as C, Python provides a simple and elegant solution for many cases to either prove a theory or gather data before developing a more robust solution. Obscure topics such as raw sockets, multicast, network bridging, rolling your own vpn, and disruption tolerant networking will be covered. Use of Python can enable building a custom protocols, debugging a network, fixing broken nets, custom logging and processing, and simulation of networks. The author will talk about his experiences using Python on Linux for extreme network programming and possibilities for future efforts.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011ExtremeNetworkProgrammingWithPythonAndLinux291.mp4", 
      "tags": [
        260, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Extreme Network Programming with Python and Linux", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T13:41:23+00:00", 
      "source_url": "http://blip.tv/file/4878761", 
      "video_ogv_length": "192624692", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011ExtremeNetworkProgrammingWithPythonAndLinux612.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011ExtremeNetworkProgrammingWithPythonAndLinux612.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011ExtremeNetworkProgrammingWithPythonAndLinux128.png", 
      "slug": "pycon-2011--extreme-network-programming-with-pyth"
    }, 
    "model": "videos.Video", 
    "pk": 449
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        244, 
        245
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>PyCon 2011: Supercomputer and Cluster Application Performance Analysis using Python</p>\n<p>Presented by Daniel W. Barnette, PhD</p>\n<p>\nSandia National Labs analyzes high-performance computing environments to optimize application performance, analyze system architectures, and provide design guidance for future systems. We discuss 1) generating performance data across multiple systems using mini-applications, and 2) using our open source Python tools Pylot/Co-Pylot to store and analyze data using a MySQL database server.\n</p>\n<p>Abstract</p>\n<p>\nSandia National Laboratories analyzes large-scale, state-of-the-art high performance computing environments for the Department of Energy (DOE), Department of Defense (DoD), and other government agencies. Execution efficiency is vital when dealing with datasets that require billions of elements or when running simulations that take millions of core-hours to complete.\n</p>\n<p>\nOne approach to investigating execution efficiency is to instrument our large-scale applications and platforms to generate timings and other performance data. Although effective in mature computing environments, working directly with large-scale applications is cumbersome, time consuming, and even impossible in the early stages of computer system analysis and design. Furthermore, the software and data sets of these applications may be restricted, limiting our abilities to collaborate.\n</p>\n<p>\nIn order to enhance our analysis capabilities far upstream from when large-scale applications can be used and when working with external collaborators, we have developed a collection of mini-applications that capture the essence of our much larger scientific codes, are readily applicable to both large and small systems, and whose run-time information can accurately reveal problems associated with execution efficiency.\n</p>\n<p>\nGenerating the data is only half the problem, though. We need the ability to capture platform-relevant mini-app performance data at the convenience of the testers when and where they generate the data. We also need the ability to search through, filter, and visualize the resulting performance measurement datasets in detail to identify and understand trends and patterns.\n</p>\n<p>\nSandia National Laboratories has developed a performance analysis suite primarily consisting of two tools written in Python, Pylot and Co-Pylot. Co-Pylot is a relatively simple interface that enables easy batch transfer of performance data to a remote MySQL database server for persistent storage.\n</p>\n<p>\nOnce stored, the performance data is extracted, organized, filtered, and analyzed using Pylot, a more functionally complex interface. Pylot is used to present user-selected MySQL database fields in a variety of views including statistical data, bar and pie charts, Cartesian or log-log or semi-log plots, reference curves for comparisons, and Kiviat diagrams (also called radar charts) for multivariate datasets.\n</p>\n<p>\nA built-in storage buffer provides the ability to store, compare, and analyze data from multiple databases. This capability is critical for studying performance variations of a code running on a particular architecture, comparing application performance across architectures, or comparing multiple applications on one or more architectures. Values in up to four database fields at a time can be mathematically combined to generate a new temporary field to provide complete generality while accessing a database. Further, Pylot provides the ability to easily move MySQL databases and tables between computers, including the analyst\u2019s laptop. This coherency of databases across multiple analysis platforms can be used, for example, to avoid network latency issues associated with accessing remote servers. It also serves as a distributed backup system.\n</p>\n<p>\nAn outline of this presentation follows:\n</p>\n<ol>\n<li>Applications at Sandia National Laboratories (6 mins)\n   <ul>\n<li>Simulation size and runtime of typical large Sandia applications\n   </li><li>Difficulties of using large-scale applications in early computer system design and analysis\n   </li><li>Mantevo mini-apps \u2013 small, self-contained programs that embody essential performance characteristics of key applications.\n   </li></ul>\n</li><li>Gathering data (4 mins)\n   <ul>\n<li>What information Mantevo mini-apps provide\n   </li><li>Co-Pylot \u2013 getting your data into a remote database\n   </li></ul>\n</li><li>Supercomputer and Cluster application analysis (10 mins)\n   <ul>\n<li>Pylot \u2013 demo of accessing and graphing MySQL data as a method for analyzing performance\n   </li><li>Diagnosing performance issues\n   </li><li>Comparing different systems and different runs\n   </li></ul>\n</li><li>Future Extensions of Pylot (5 mins)\n   <ul>\n<li>Capturing compile-time and execution info\n   </li><li>Efforts to move parts of Pylot to the web\n   </li></ul>\n</li></ol>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011SupercomputerAndClusterApplicationPerformanceAna295.mp4", 
      "tags": [
        231, 
        489, 
        673, 
        674, 
        675
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "Supercomputer and Cluster Application Performance Analysis using Python", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T13:37:51+00:00", 
      "source_url": "http://blip.tv/file/4878753", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011SupercomputerAndClusterApplicationPerformanceAna976.ogv", 
      "summary": "", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011SupercomputerAndClusterApplicationPerformanceAna976.ogv\"\n  })\n</script>", 
      "video_ogv_length": "144836736", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011SupercomputerAndClusterApplicationPerformanceAna648.png", 
      "slug": "pycon-2011--supercomputer-and-cluster-application"
    }, 
    "model": "videos.Video", 
    "pk": 450
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        246
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>\"Dude, Where's My RAM?\" - A deep dive into how Python uses memory</p>\n<p>Presented by Dave Malcolm</p>\n<p>\nThis talk will give a deep dive into how CPython uses memory. I'll be demonstrating a new tool I've written that analyses CPython's memory usage, and offer hints and tips on how you can reduce the memory footprint of your Python programs.\n</p>\n<p>Abstract</p>\n<p>\nIs your Python program using too much memory? This talk will give a deep dive into how CPython uses memory - starting from objects in your Python code, down through the various implementations layers, eventually reaching actual hardware.\n</p>\n<p>\nIn particular, I'll be demonstrating a new tool I've written that can track CPython's memory usage down to the level of individual bytes, and offer hints and tips on how you can reduce the memory footprint of your Python programs.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011DudeWheresMyRAMADeepDiveIntoHowPythonUses733.mp4", 
      "tags": [
        18, 
        676, 
        231, 
        489
      ], 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "title": "\"Dude, Where's My RAM?\" - A deep dive into how Python uses memory", 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T13:35:00+00:00", 
      "source_url": "http://blip.tv/file/4878749", 
      "video_ogv_length": "165288953", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011DudeWheresMyRAMADeepDiveIntoHowPythonUses163.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011DudeWheresMyRAMADeepDiveIntoHowPythonUses163.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011DudeWheresMyRAMADeepDiveIntoHowPythonUses951.png", 
      "slug": "pycon-2011---quot-dude--where--39-s-my-ram--quot-"
    }, 
    "model": "videos.Video", 
    "pk": 451
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        247
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Distributed Tasks with Celery</p>\n<p>Presented by Ryan Petrello</p>\n<p>\nCelery is an open source task queueing system based on distributed message passing, especially using the AMQP protocol. This talk will focus on the need for task distribution, the tools celery provides to meet those needs, and an in-depth discussion of how we've used celery at ShootQ to improve the efficiency and reliability of our background processes.\n</p>\n<p>Abstract</p>\n<p>\nThe talk (including time for questions) will last approximately 30 minutes and will focus on the following topics:\n</p>\n<ul>\n<li>The need for distributed tasks in real world systems, especially in a web application environment. This portion of the talk will describe examples where the traditional request-response model of the web can be improved with background processing.\n</li><li>A brief overview of traditional distributed message passing models and the AMPQ protocol.\n</li><li>An overview of Celery and the variety of tools it provides for task distribution, scheduling, and execution. This portion of the talk will also review production-oriented components of Celery, such as monitoring, error detection/reporting, and error recovery.\n</li><li>Real world discussion of several problems we solved at ShootQ using Celery including before-and-after looks at our implementations.\n</li><li>Common pitfalls and gotchas we encountered while working with Celery.\n</li></ul>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011DistributedTasksWithCelery807.mp4", 
      "title": "Distributed Tasks with Celery", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "slug": "pycon-2011--distributed-tasks-with-celery", 
      "tags": [
        677, 
        48, 
        231, 
        489, 
        678
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T13:33:23+00:00", 
      "source_url": "http://blip.tv/file/4878746", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011DistributedTasksWithCelery790.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011DistributedTasksWithCelery790.ogv\"\n  })\n</script>", 
      "video_ogv_length": "162590519", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011DistributedTasksWithCelery711.png", 
      "summary": ""
    }, 
    "model": "videos.Video", 
    "pk": 452
  }, 
  {
    "fields": {
      "category": 7, 
      "speakers": [
        26
      ], 
      "added": "2012-02-22 22:20", 
      "description": "<p>Python Software Foundation Chairman Address</p>\n<p>Presented by Steve Holden</p>\n<p>\nSteven Holden summarizes the last year for the Python Software Foundation and talks about future directions.\n</p>", 
      "video_mp4_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonSoftwareFoundationChairmanAddress349.mp4", 
      "title": "Python Software Foundation Chairman Address", 
      "copyright_text": "Creative Commons Attribution-NonCommercial-ShareAlike 3.0", 
      "tags": [
        679, 
        11, 
        231, 
        489
      ], 
      "recorded": "2011-03-11", 
      "updated": "2011-03-13T04:52:02+00:00", 
      "source_url": "http://blip.tv/file/4877606", 
      "video_ogv_length": "72214347", 
      "video_ogv_url": "http://blip.tv/file/get/Pycon-PyCon2011PythonSoftwareFoundationChairmanAddress342.ogv", 
      "embed": "<script type=\"text/javascript\" src=\"http://s3.www.universalsubtitles.org/embed.js\">\n ({\n       video_url: \"http://blip.tv/file/get/Pycon-PyCon2011PythonSoftwareFoundationChairmanAddress182.ogv\"\n  })\n</script>", 
      "summary": "", 
      "thumbnail_url": "http://a.images.blip.tv/Pycon-PyCon2011PythonSoftwareFoundationChairmanAddress279.png", 
      "slug": "pycon-2011--python-software-foundation-chairman-a"
    }, 
    "model": "videos.Video", 
    "pk": 453
  }
]
